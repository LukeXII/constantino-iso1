
myOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f34  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f8  080030f8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003100  08003100  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0000082c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000088c  2000088c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d1a6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023f0  00000000  00000000  0002d279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e88  00000000  00000000  0002f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aff  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000250a0  00000000  00000000  00030ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e5fb  00000000  00000000  00056097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0de6  00000000  00000000  00064692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003bb4  00000000  00000000  00145478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0014902c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080030c8 	.word	0x080030c8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	080030c8 	.word	0x080030c8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fb5e 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f870 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8d8 	bl	80006a8 <MX_GPIO_Init>
//  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */

  osTaskCreate(&task1, TASK_PRIORITY_0, osTask1);
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <main+0x48>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x4c>)
 80004fe:	f002 f90b 	bl	8002718 <osTaskCreate>
  osTaskCreate(&task2, TASK_PRIORITY_0, osTask2);
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <main+0x50>)
 8000504:	2100      	movs	r1, #0
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x54>)
 8000508:	f002 f906 	bl	8002718 <osTaskCreate>
//  osTaskCreate(&task3, TASK_PRIORITY_0, osTask3);
//  osTaskCreate(&task4, TASK_PRIORITY_0, osTask4);
//  osTaskCreate(&task5, TASK_PRIORITY_1, osTask5);
//  osTaskCreate(&task6, TASK_PRIORITY_2, osTask6);

  osQueueInit(&testQueue, sizeof(uint32_t));
 800050c:	2104      	movs	r1, #4
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x58>)
 8000510:	f002 fc66 	bl	8002de0 <osQueueInit>
  osSemaphoreInit(&testSemaphore, 3, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2103      	movs	r1, #3
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <main+0x5c>)
 800051a:	f002 fc8a 	bl	8002e32 <osSemaphoreInit>

  osRegisterIRQ(EXTI15_10_IRQn, myIRQFunction, &irqData);
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <main+0x60>)
 8000520:	490a      	ldr	r1, [pc, #40]	; (800054c <main+0x64>)
 8000522:	2028      	movs	r0, #40	; 0x28
 8000524:	f002 fc26 	bl	8002d74 <osRegisterIRQ>

  osStart();
 8000528:	f002 f95a 	bl	80027e0 <osStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	__WFI();
 800052c:	bf30      	wfi
 800052e:	e7fd      	b.n	800052c <main+0x44>
 8000530:	08000589 	.word	0x08000589
 8000534:	2000007c 	.word	0x2000007c
 8000538:	080005ad 	.word	0x080005ad
 800053c:	2000018c 	.word	0x2000018c
 8000540:	200002ac 	.word	0x200002ac
 8000544:	2000029c 	.word	0x2000029c
 8000548:	20000000 	.word	0x20000000
 800054c:	08000551 	.word	0x08000551

08000550 <myIRQFunction>:
  }
  /* USER CODE END 3 */
}

void myIRQFunction(void * data)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000558:	2101      	movs	r1, #1
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <myIRQFunction+0x2c>)
 800055c:	f000 fe0f 	bl	800117e <HAL_GPIO_TogglePin>

	task2.taskExecStatus = OS_TASK_READY;
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <myIRQFunction+0x30>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

	setReschedulingISR();
 8000568:	f002 f9e6 	bl	8002938 <setReschedulingISR>

	__HAL_GPIO_EXTI_CLEAR_IT(USER_Btn_Pin);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <myIRQFunction+0x34>)
 800056e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000572:	615a      	str	r2, [r3, #20]
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020400 	.word	0x40020400
 8000580:	2000018c 	.word	0x2000018c
 8000584:	40013c00 	.word	0x40013c00

08000588 <osTask1>:

void osTask1(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  uint32_t i = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
  uint32_t a = 25;
 8000592:	2319      	movs	r3, #25
 8000594:	603b      	str	r3, [r7, #0]

  task2.taskExecStatus = OS_TASK_BLOCKED;
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <osTask1+0x20>)
 8000598:	2202      	movs	r2, #2
 800059a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
//  osDelay(2);
//  osSemaphoreTake(&testSemaphore);

  while(1)
  {
    i++;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	e7fb      	b.n	800059e <osTask1+0x16>
 80005a6:	bf00      	nop
 80005a8:	2000018c 	.word	0x2000018c

080005ac <osTask2>:
  }
}


void osTask2(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  uint32_t j = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
  uint32_t a = 25;
 80005b6:	2319      	movs	r3, #25
 80005b8:	603b      	str	r3, [r7, #0]
//  osQueueReceive(&testQueue, &a, 5);

  while(1)
  {

	osDelay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f002 f9fe 	bl	80029bc <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <osTask2+0x24>)
 80005c4:	f000 fddb 	bl	800117e <HAL_GPIO_TogglePin>
	osDelay(200);
 80005c8:	20c8      	movs	r0, #200	; 0xc8
 80005ca:	f002 f9f7 	bl	80029bc <osDelay>
	osDelay(200);
 80005ce:	e7f4      	b.n	80005ba <osTask2+0xe>
 80005d0:	40020400 	.word	0x40020400

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fd2c 	bl	8003040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000648:	23a8      	movs	r3, #168	; 0xa8
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fdab 	bl	80011b4 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f8e8 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f80c 	bl	80016a4 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f8d1 	bl	8000838 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b49      	ldr	r3, [pc, #292]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <MX_GPIO_Init+0x15c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a41      	ldr	r2, [pc, #260]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3a      	ldr	r2, [pc, #232]	; (8000804 <MX_GPIO_Init+0x15c>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_GPIO_Init+0x15c>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_GPIO_Init+0x15c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f244 0181 	movw	r1, #16513	; 0x4081
 800076c:	4826      	ldr	r0, [pc, #152]	; (8000808 <MX_GPIO_Init+0x160>)
 800076e:	f000 fced 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <MX_GPIO_Init+0x164>)
 8000778:	f000 fce8 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000788:	2302      	movs	r3, #2
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <MX_GPIO_Init+0x168>)
 8000794:	f000 fb2e 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000798:	f244 0381 	movw	r3, #16513	; 0x4081
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <MX_GPIO_Init+0x160>)
 80007b2:	f000 fb1f 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	; (800080c <MX_GPIO_Init+0x164>)
 80007ce:	f000 fb11 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_GPIO_Init+0x164>)
 80007e6:	f000 fb05 	bl	8000df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2028      	movs	r0, #40	; 0x28
 80007f0:	f000 fad6 	bl	8000da0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f000 faef 	bl	8000dd8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400
 800080c:	40021800 	.word	0x40021800
 8000810:	40020800 	.word	0x40020800

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f9e3 	bl	8000bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010000 	.word	0x40010000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <HAL_InitTick+0xd4>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <HAL_InitTick+0xd4>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6453      	str	r3, [r2, #68]	; 0x44
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <HAL_InitTick+0xd4>)
 80008b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 020c 	add.w	r2, r7, #12
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f8f6 	bl	8001abc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008d0:	f001 f8e0 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	4a23      	ldr	r2, [pc, #140]	; (800096c <HAL_InitTick+0xd8>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9b      	lsrs	r3, r3, #18
 80008e4:	3b01      	subs	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <HAL_InitTick+0xdc>)
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <HAL_InitTick+0xe0>)
 80008ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <HAL_InitTick+0xdc>)
 80008f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <HAL_InitTick+0xdc>)
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_InitTick+0xdc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_InitTick+0xdc>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_InitTick+0xdc>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800090e:	4818      	ldr	r0, [pc, #96]	; (8000970 <HAL_InitTick+0xdc>)
 8000910:	f001 f906 	bl	8001b20 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <HAL_InitTick+0xdc>)
 8000924:	f001 f956 	bl	8001bd4 <HAL_TIM_Base_Start_IT>
 8000928:	4603      	mov	r3, r0
 800092a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000932:	2b00      	cmp	r3, #0
 8000934:	d111      	bne.n	800095a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000936:	2019      	movs	r0, #25
 8000938:	f000 fa4e 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b0f      	cmp	r3, #15
 8000940:	d808      	bhi.n	8000954 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000942:	2200      	movs	r2, #0
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	2019      	movs	r0, #25
 8000948:	f000 fa2a 	bl	8000da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_InitTick+0xe4>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e002      	b.n	800095a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800095a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800095e:	4618      	mov	r0, r3
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	431bde83 	.word	0x431bde83
 8000970:	200002b8 	.word	0x200002b8
 8000974:	40010000 	.word	0x40010000
 8000978:	20000008 	.word	0x20000008

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009be:	f001 f979 	bl	8001cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002b8 	.word	0x200002b8

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f002 fb38 	bl	8003070 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20030000 	.word	0x20030000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	20000300 	.word	0x20000300
 8000a34:	20000890 	.word	0x20000890

08000a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a76:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
 8000a7e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	2b08      	cmp	r3, #8
 8000a84:	d011      	beq.n	8000aaa <SystemCoreClockUpdate+0x4e>
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	d844      	bhi.n	8000b16 <SystemCoreClockUpdate+0xba>
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <SystemCoreClockUpdate+0x3e>
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d004      	beq.n	8000aa2 <SystemCoreClockUpdate+0x46>
 8000a98:	e03d      	b.n	8000b16 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a9a:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <SystemCoreClockUpdate+0xf0>)
 8000a9c:	4a2c      	ldr	r2, [pc, #176]	; (8000b50 <SystemCoreClockUpdate+0xf4>)
 8000a9e:	601a      	str	r2, [r3, #0]
      break;
 8000aa0:	e03d      	b.n	8000b1e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <SystemCoreClockUpdate+0xf0>)
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <SystemCoreClockUpdate+0xf8>)
 8000aa6:	601a      	str	r2, [r3, #0]
      break;
 8000aa8:	e039      	b.n	8000b1e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	0d9b      	lsrs	r3, r3, #22
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000abe:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00c      	beq.n	8000ae0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <SystemCoreClockUpdate+0xf8>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000ad0:	6852      	ldr	r2, [r2, #4]
 8000ad2:	0992      	lsrs	r2, r2, #6
 8000ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e00b      	b.n	8000af8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <SystemCoreClockUpdate+0xf4>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000aea:	6852      	ldr	r2, [r2, #4]
 8000aec:	0992      	lsrs	r2, r2, #6
 8000aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	0c1b      	lsrs	r3, r3, #16
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	3301      	adds	r3, #1
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <SystemCoreClockUpdate+0xf0>)
 8000b12:	6013      	str	r3, [r2, #0]
      break;
 8000b14:	e003      	b.n	8000b1e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <SystemCoreClockUpdate+0xf0>)
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <SystemCoreClockUpdate+0xf4>)
 8000b1a:	601a      	str	r2, [r3, #0]
      break;
 8000b1c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <SystemCoreClockUpdate+0xec>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	091b      	lsrs	r3, r3, #4
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <SystemCoreClockUpdate+0xfc>)
 8000b2a:	5cd3      	ldrb	r3, [r2, r3]
 8000b2c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <SystemCoreClockUpdate+0xf0>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa22 f303 	lsr.w	r3, r2, r3
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <SystemCoreClockUpdate+0xf0>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	371c      	adds	r7, #28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	00f42400 	.word	0x00f42400
 8000b54:	007a1200 	.word	0x007a1200
 8000b58:	080030e0 	.word	0x080030e0

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ff57 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f002 fa77 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fcab 	bl	80004e8 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ba0:	08003108 	.word	0x08003108
  ldr r2, =_sbss
 8000ba4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ba8:	2000088c 	.word	0x2000088c

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <HAL_Init+0x40>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_Init+0x40>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x40>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f8d8 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f7ff fe5a 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe30 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	20000304 	.word	0x20000304

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000304 	.word	0x20000304

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff4c 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db2:	f7ff ff61 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff ffb1 	bl	8000d24 <NVIC_EncodePriority>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff80 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff54 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e177      	b.n	8001100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8166 	bne.w	80010fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80c0 	beq.w	80010fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a65      	ldr	r2, [pc, #404]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a61      	ldr	r2, [pc, #388]	; (800111c <HAL_GPIO_Init+0x328>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_GPIO_Init+0x32c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d037      	beq.n	8001032 <HAL_GPIO_Init+0x23e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a57      	ldr	r2, [pc, #348]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d031      	beq.n	800102e <HAL_GPIO_Init+0x23a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a56      	ldr	r2, [pc, #344]	; (8001128 <HAL_GPIO_Init+0x334>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x236>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a55      	ldr	r2, [pc, #340]	; (800112c <HAL_GPIO_Init+0x338>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x232>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a54      	ldr	r2, [pc, #336]	; (8001130 <HAL_GPIO_Init+0x33c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x22e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a53      	ldr	r2, [pc, #332]	; (8001134 <HAL_GPIO_Init+0x340>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x22a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a52      	ldr	r2, [pc, #328]	; (8001138 <HAL_GPIO_Init+0x344>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <HAL_GPIO_Init+0x348>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a50      	ldr	r2, [pc, #320]	; (8001140 <HAL_GPIO_Init+0x34c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x21a>
 800100a:	2309      	movs	r3, #9
 800100c:	e012      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800100e:	230a      	movs	r3, #10
 8001010:	e010      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001012:	2308      	movs	r3, #8
 8001014:	e00e      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001016:	2307      	movs	r3, #7
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101a:	2306      	movs	r3, #6
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x328>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_GPIO_Init+0x354>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a34      	ldr	r2, [pc, #208]	; (8001148 <HAL_GPIO_Init+0x354>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x354>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a29      	ldr	r2, [pc, #164]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae84 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40022000 	.word	0x40022000
 8001144:	40022400 	.word	0x40022400
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001190:	887a      	ldrh	r2, [r7, #2]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	041a      	lsls	r2, r3, #16
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43d9      	mvns	r1, r3
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	400b      	ands	r3, r1
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e267      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d075      	beq.n	80012be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d00c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d112      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ea:	4b82      	ldr	r3, [pc, #520]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f6:	d10b      	bne.n	8001210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d05b      	beq.n	80012bc <HAL_RCC_OscConfig+0x108>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d157      	bne.n	80012bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e242      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d106      	bne.n	8001228 <HAL_RCC_OscConfig+0x74>
 800121a:	4b76      	ldr	r3, [pc, #472]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a75      	ldr	r2, [pc, #468]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e01d      	b.n	8001264 <HAL_RCC_OscConfig+0xb0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x98>
 8001232:	4b70      	ldr	r3, [pc, #448]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6f      	ldr	r2, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e00b      	b.n	8001264 <HAL_RCC_OscConfig+0xb0>
 800124c:	4b69      	ldr	r3, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b66      	ldr	r3, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a65      	ldr	r2, [pc, #404]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 800125e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcd4 	bl	8000c18 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fcd0 	bl	8000c18 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e207      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0xc0>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fcc0 	bl	8000c18 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fcbc 	bl	8000c18 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e1f3      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0xe8>
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d063      	beq.n	8001392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ca:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00b      	beq.n	80012ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d11c      	bne.n	800131c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d116      	bne.n	800131c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x152>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e1c7      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	e03a      	b.n	8001392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_RCC_OscConfig+0x244>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132a:	f7ff fc75 	bl	8000c18 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fc71 	bl	8000c18 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1a8      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4925      	ldr	r1, [pc, #148]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x244>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136c:	f7ff fc54 	bl	8000c18 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001374:	f7ff fc50 	bl	8000c18 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e187      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d036      	beq.n	800140c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d016      	beq.n	80013d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_RCC_OscConfig+0x248>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ac:	f7ff fc34 	bl	8000c18 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc30 	bl	8000c18 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e167      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x200>
 80013d2:	e01b      	b.n	800140c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_OscConfig+0x248>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fc1d 	bl	8000c18 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	e00e      	b.n	8001400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc19 	bl	8000c18 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d907      	bls.n	8001400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e150      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	42470000 	.word	0x42470000
 80013fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ea      	bne.n	80013e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8097 	beq.w	8001548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144a:	4b77      	ldr	r3, [pc, #476]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a73      	ldr	r2, [pc, #460]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff fbd9 	bl	8000c18 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff fbd5 	bl	8000c18 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e10c      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <HAL_RCC_OscConfig+0x474>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x2ea>
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a63      	ldr	r2, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	e01c      	b.n	80014d8 <HAL_RCC_OscConfig+0x324>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x30c>
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b6:	4a5b      	ldr	r2, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6713      	str	r3, [r2, #112]	; 0x70
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0x324>
 80014c0:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a54      	ldr	r2, [pc, #336]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 0304 	bic.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d015      	beq.n	800150c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fb9a 	bl	8000c18 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb96 	bl	8000c18 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0cb      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fe:	4b49      	ldr	r3, [pc, #292]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ee      	beq.n	80014e8 <HAL_RCC_OscConfig+0x334>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff fb84 	bl	8000c18 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fb80 	bl	8000c18 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0b5      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ee      	bne.n	8001514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d105      	bne.n	8001548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a38      	ldr	r2, [pc, #224]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a1 	beq.w	8001694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d05c      	beq.n	8001618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d141      	bne.n	80015ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_RCC_OscConfig+0x478>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fb54 	bl	8000c18 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fb50 	bl	8000c18 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e087      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	3b01      	subs	r3, #1
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x478>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb29 	bl	8000c18 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb25 	bl	8000c18 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e05c      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x416>
 80015e8:	e054      	b.n	8001694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb12 	bl	8000c18 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb0e 	bl	8000c18 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e045      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x444>
 8001616:	e03d      	b.n	8001694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e038      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000
 800162c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x4ec>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d028      	beq.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d121      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	429a      	cmp	r2, r3
 8001658:	d11a      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	4293      	cmp	r3, r2
 800166a:	d111      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	3b01      	subs	r3, #1
 800167a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d107      	bne.n	8001690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0cc      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d90c      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0b8      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	494d      	ldr	r1, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d044      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d119      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e07f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d003      	beq.n	8001762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	2b03      	cmp	r3, #3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e067      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4934      	ldr	r1, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fa40 	bl	8000c18 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa3c 	bl	8000c18 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e04f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d20c      	bcs.n	80017ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e032      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4916      	ldr	r1, [pc, #88]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	490e      	ldr	r1, [pc, #56]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182a:	f000 f821 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 800182e:	4602      	mov	r2, r0
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	490a      	ldr	r1, [pc, #40]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	5ccb      	ldrb	r3, [r1, r3]
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f822 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00
 8001860:	40023800 	.word	0x40023800
 8001864:	080030e0 	.word	0x080030e0
 8001868:	20000004 	.word	0x20000004
 800186c:	20000008 	.word	0x20000008

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001874:	b094      	sub	sp, #80	; 0x50
 8001876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
 800187c:	2300      	movs	r3, #0
 800187e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001880:	2300      	movs	r3, #0
 8001882:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001888:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d00d      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001894:	2b08      	cmp	r3, #8
 8001896:	f200 80e1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x34>
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x3a>
 80018a2:	e0db      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018a8:	e0db      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x208>)
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ae:	e0d8      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d063      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c6:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
 80018da:	2300      	movs	r3, #0
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
 80018de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018e2:	4622      	mov	r2, r4
 80018e4:	462b      	mov	r3, r5
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	0159      	lsls	r1, r3, #5
 80018f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f4:	0150      	lsls	r0, r2, #5
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4621      	mov	r1, r4
 80018fc:	1a51      	subs	r1, r2, r1
 80018fe:	6139      	str	r1, [r7, #16]
 8001900:	4629      	mov	r1, r5
 8001902:	eb63 0301 	sbc.w	r3, r3, r1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001914:	4659      	mov	r1, fp
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	4651      	mov	r1, sl
 800191a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191e:	4651      	mov	r1, sl
 8001920:	018a      	lsls	r2, r1, #6
 8001922:	4651      	mov	r1, sl
 8001924:	ebb2 0801 	subs.w	r8, r2, r1
 8001928:	4659      	mov	r1, fp
 800192a:	eb63 0901 	sbc.w	r9, r3, r1
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001942:	4690      	mov	r8, r2
 8001944:	4699      	mov	r9, r3
 8001946:	4623      	mov	r3, r4
 8001948:	eb18 0303 	adds.w	r3, r8, r3
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	462b      	mov	r3, r5
 8001950:	eb49 0303 	adc.w	r3, r9, r3
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001962:	4629      	mov	r1, r5
 8001964:	024b      	lsls	r3, r1, #9
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800196c:	4621      	mov	r1, r4
 800196e:	024a      	lsls	r2, r1, #9
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001976:	2200      	movs	r2, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
 800197a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800197c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001980:	f7fe fc34 	bl	80001ec <__aeabi_uldivmod>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4613      	mov	r3, r2
 800198a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800198c:	e058      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	4618      	mov	r0, r3
 8001998:	4611      	mov	r1, r2
 800199a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019a8:	4642      	mov	r2, r8
 80019aa:	464b      	mov	r3, r9
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	0159      	lsls	r1, r3, #5
 80019b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ba:	0150      	lsls	r0, r2, #5
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4641      	mov	r1, r8
 80019c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019c6:	4649      	mov	r1, r9
 80019c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e0:	ebb2 040a 	subs.w	r4, r2, sl
 80019e4:	eb63 050b 	sbc.w	r5, r3, fp
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	00eb      	lsls	r3, r5, #3
 80019f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f6:	00e2      	lsls	r2, r4, #3
 80019f8:	4614      	mov	r4, r2
 80019fa:	461d      	mov	r5, r3
 80019fc:	4643      	mov	r3, r8
 80019fe:	18e3      	adds	r3, r4, r3
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	464b      	mov	r3, r9
 8001a04:	eb45 0303 	adc.w	r3, r5, r3
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	61fa      	str	r2, [r7, #28]
 8001a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a34:	f7fe fbda 	bl	80001ec <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3750      	adds	r7, #80	; 0x50
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0b5b      	lsrs	r3, r3, #13
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	080030f0 	.word	0x080030f0

08001abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	220f      	movs	r2, #15
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetClockConfig+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 020f 	and.w	r2, r3, #15
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f839 	bl	8001bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f9d8 	bl	8001f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d001      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04e      	b.n	8001c8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d022      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c16:	d01d      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_TIM_Base_Start_IT+0xd8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d010      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40010400 	.word	0x40010400
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40001800 	.word	0x40001800

08001cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d122      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d11b      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0202 	mvn.w	r2, #2
 8001ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8ee 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001cfc:	e005      	b.n	8001d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8e0 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8f1 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d122      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0204 	mvn.w	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8c4 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8b6 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8c7 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0208 	mvn.w	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f89a 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f88c 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f89d 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0210 	mvn.w	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f870 	bl	8001ed8 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f862 	bl	8001ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f873 	bl	8001eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0201 	mvn.w	r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fcee 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b80      	cmp	r3, #128	; 0x80
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b80      	cmp	r3, #128	; 0x80
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f902 	bl	8002068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6e:	2b40      	cmp	r3, #64	; 0x40
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f838 	bl	8001f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0220 	mvn.w	r2, #32
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8cc 	bl	8002054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a40      	ldr	r2, [pc, #256]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f32:	d00f      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <TIM_Base_SetConfig+0x118>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00b      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	; (8002030 <TIM_Base_SetConfig+0x11c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <TIM_Base_SetConfig+0x120>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d108      	bne.n	8001f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d027      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	; (800202c <TIM_Base_SetConfig+0x118>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d023      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <TIM_Base_SetConfig+0x11c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2a      	ldr	r2, [pc, #168]	; (8002034 <TIM_Base_SetConfig+0x120>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a29      	ldr	r2, [pc, #164]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d017      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <TIM_Base_SetConfig+0x128>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a27      	ldr	r2, [pc, #156]	; (8002040 <TIM_Base_SetConfig+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <TIM_Base_SetConfig+0x130>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <TIM_Base_SetConfig+0x134>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a24      	ldr	r2, [pc, #144]	; (800204c <TIM_Base_SetConfig+0x138>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a23      	ldr	r2, [pc, #140]	; (8002050 <TIM_Base_SetConfig+0x13c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d108      	bne.n	8001fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d003      	beq.n	800200c <TIM_Base_SetConfig+0xf8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <TIM_Base_SetConfig+0x124>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d103      	bne.n	8002014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	615a      	str	r2, [r3, #20]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40010400 	.word	0x40010400
 800203c:	40014000 	.word	0x40014000
 8002040:	40014400 	.word	0x40014400
 8002044:	40014800 	.word	0x40014800
 8002048:	40001800 	.word	0x40001800
 800204c:	40001c00 	.word	0x40001c00
 8002050:	40002000 	.word	0x40002000

08002054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <__NVIC_ClearPendingIRQ>:
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0c      	blt.n	80020a8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_ClearPendingIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	3360      	adds	r3, #96	; 0x60
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <WWDG_IRQHandler>:
#include "stm32f429.h"
#include "core_cm4.h"

osIRQVector irqVector[IRQ_NUMBER] = { 0 };

void WWDG_IRQHandler(void)                  {osIRQHandler(WWDG_IRQn);}                  /* Window WatchDog                             */
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	2000      	movs	r0, #0
 80020be:	f000 fa6b 	bl	8002598 <osIRQHandler>
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <PVD_IRQHandler>:
void PVD_IRQHandler(void)                   {osIRQHandler(PVD_IRQn);}                   /* PVD through EXTI Line detection             */
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	2001      	movs	r0, #1
 80020cc:	f000 fa64 	bl	8002598 <osIRQHandler>
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <TAMP_STAMP_IRQHandler>:
void TAMP_STAMP_IRQHandler(void)            {osIRQHandler(TAMP_STAMP_IRQn);}            /* Tamper and TimeStamps through the EXTI line */
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	2002      	movs	r0, #2
 80020da:	f000 fa5d 	bl	8002598 <osIRQHandler>
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)              {osIRQHandler(RTC_WKUP_IRQn);}              /* RTC Wakeup through the EXTI line            */
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	2003      	movs	r0, #3
 80020e8:	f000 fa56 	bl	8002598 <osIRQHandler>
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <FLASH_IRQHandler>:
void FLASH_IRQHandler(void)                 {osIRQHandler(FLASH_IRQn);}                 /* FLASH                                       */
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	2004      	movs	r0, #4
 80020f6:	f000 fa4f 	bl	8002598 <osIRQHandler>
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}

080020fe <RCC_IRQHandler>:
void RCC_IRQHandler(void)                   {osIRQHandler(RCC_IRQn);}                   /* RCC                                         */
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
 8002102:	2005      	movs	r0, #5
 8002104:	f000 fa48 	bl	8002598 <osIRQHandler>
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)                 {osIRQHandler(EXTI0_IRQn);}                 /* EXTI Line0                                  */
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
 8002110:	2006      	movs	r0, #6
 8002112:	f000 fa41 	bl	8002598 <osIRQHandler>
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}

0800211a <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)                 {osIRQHandler(EXTI1_IRQn);}                 /* EXTI Line1                                  */
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0
 800211e:	2007      	movs	r0, #7
 8002120:	f000 fa3a 	bl	8002598 <osIRQHandler>
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)                 {osIRQHandler(EXTI2_IRQn);}                 /* EXTI Line2                                  */
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
 800212c:	2008      	movs	r0, #8
 800212e:	f000 fa33 	bl	8002598 <osIRQHandler>
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}

08002136 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)                 {osIRQHandler(EXTI3_IRQn);}                 /* EXTI Line3                                  */
 8002136:	b580      	push	{r7, lr}
 8002138:	af00      	add	r7, sp, #0
 800213a:	2009      	movs	r0, #9
 800213c:	f000 fa2c 	bl	8002598 <osIRQHandler>
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)                 {osIRQHandler(EXTI4_IRQn);}                 /* EXTI Line4                                  */
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
 8002148:	200a      	movs	r0, #10
 800214a:	f000 fa25 	bl	8002598 <osIRQHandler>
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}

08002152 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)          {osIRQHandler(DMA1_Stream0_IRQn);}          /* DMA1 Stream 0                               */
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
 8002156:	200b      	movs	r0, #11
 8002158:	f000 fa1e 	bl	8002598 <osIRQHandler>
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)          {osIRQHandler(DMA1_Stream1_IRQn);}          /* DMA1 Stream 1                               */
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
 8002164:	200c      	movs	r0, #12
 8002166:	f000 fa17 	bl	8002598 <osIRQHandler>
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}

0800216e <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)          {osIRQHandler(DMA1_Stream2_IRQn);}          /* DMA1 Stream 2                               */
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
 8002172:	200d      	movs	r0, #13
 8002174:	f000 fa10 	bl	8002598 <osIRQHandler>
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)          {osIRQHandler(DMA1_Stream3_IRQn);}          /* DMA1 Stream 3                               */
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
 8002180:	200e      	movs	r0, #14
 8002182:	f000 fa09 	bl	8002598 <osIRQHandler>
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}

0800218a <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)          {osIRQHandler(DMA1_Stream4_IRQn);}          /* DMA1 Stream 4                               */
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
 800218e:	200f      	movs	r0, #15
 8002190:	f000 fa02 	bl	8002598 <osIRQHandler>
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)          {osIRQHandler(DMA1_Stream5_IRQn);}          /* DMA1 Stream 5                               */
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
 800219c:	2010      	movs	r0, #16
 800219e:	f000 f9fb 	bl	8002598 <osIRQHandler>
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)          {osIRQHandler(DMA1_Stream6_IRQn);}          /* DMA1 Stream 6                               */
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	2011      	movs	r0, #17
 80021ac:	f000 f9f4 	bl	8002598 <osIRQHandler>
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)                   {osIRQHandler(ADC_IRQn);}                   /* ADC1, ADC2 and ADC3s                        */
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	2012      	movs	r0, #18
 80021ba:	f000 f9ed 	bl	8002598 <osIRQHandler>
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <CAN1_TX_IRQHandler>:
void CAN1_TX_IRQHandler(void)               {osIRQHandler(CAN1_TX_IRQn);}               /* CAN1 TX                                     */
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	2013      	movs	r0, #19
 80021c8:	f000 f9e6 	bl	8002598 <osIRQHandler>
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)              {osIRQHandler(CAN1_RX0_IRQn);}              /* CAN1 RX0                                    */
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	2014      	movs	r0, #20
 80021d6:	f000 f9df 	bl	8002598 <osIRQHandler>
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}

080021de <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)              {osIRQHandler(CAN1_RX1_IRQn);}              /* CAN1 RX1                                    */
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	2015      	movs	r0, #21
 80021e4:	f000 f9d8 	bl	8002598 <osIRQHandler>
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)              {osIRQHandler(CAN1_SCE_IRQn);}              /* CAN1 SCE                                    */
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	2016      	movs	r0, #22
 80021f2:	f000 f9d1 	bl	8002598 <osIRQHandler>
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}

080021fa <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)               {osIRQHandler(EXTI9_5_IRQn);}               /* External Line[9:5]s                         */
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	2017      	movs	r0, #23
 8002200:	f000 f9ca 	bl	8002598 <osIRQHandler>
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)         {osIRQHandler(TIM1_BRK_TIM9_IRQn);}         /* TIM1 Break and TIM9                         */
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
 800220c:	2018      	movs	r0, #24
 800220e:	f000 f9c3 	bl	8002598 <osIRQHandler>
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}

08002216 <TIM1_TRG_COM_TIM11_IRQHandler>:
//void TIM1_UP_TIM10_IRQHandler(void)         {osIRQHandler(TIM1_UP_TIM10_IRQn);}         /* TIM1 Update and TIM10                       */
void TIM1_TRG_COM_TIM11_IRQHandler(void)    {osIRQHandler(TIM1_TRG_COM_TIM11_IRQn);}    /* TIM1 Trigger and Commutation and TIM11      */
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
 800221a:	201a      	movs	r0, #26
 800221c:	f000 f9bc 	bl	8002598 <osIRQHandler>
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)               {osIRQHandler(TIM1_CC_IRQn);}               /* TIM1 Capture Compare                        */
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
 8002228:	201b      	movs	r0, #27
 800222a:	f000 f9b5 	bl	8002598 <osIRQHandler>
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}

08002232 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)                  {osIRQHandler(TIM2_IRQn);}                  /* TIM2                                        */
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
 8002236:	201c      	movs	r0, #28
 8002238:	f000 f9ae 	bl	8002598 <osIRQHandler>
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)                  {osIRQHandler(TIM3_IRQn);}                  /* TIM3                                        */
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
 8002244:	201d      	movs	r0, #29
 8002246:	f000 f9a7 	bl	8002598 <osIRQHandler>
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}

0800224e <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)                  {osIRQHandler(TIM4_IRQn);}                  /* TIM4                                        */
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
 8002252:	201e      	movs	r0, #30
 8002254:	f000 f9a0 	bl	8002598 <osIRQHandler>
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)               {osIRQHandler(I2C1_EV_IRQn);}               /* I2C1 Event                                  */
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
 8002260:	201f      	movs	r0, #31
 8002262:	f000 f999 	bl	8002598 <osIRQHandler>
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}

0800226a <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)               {osIRQHandler(I2C1_ER_IRQn);}               /* I2C1 Error                                  */
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
 800226e:	2020      	movs	r0, #32
 8002270:	f000 f992 	bl	8002598 <osIRQHandler>
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)               {osIRQHandler(I2C2_EV_IRQn);}               /* I2C2 Event                                  */
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
 800227c:	2021      	movs	r0, #33	; 0x21
 800227e:	f000 f98b 	bl	8002598 <osIRQHandler>
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)               {osIRQHandler(I2C2_ER_IRQn);}               /* I2C2 Error                                  */
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
 800228a:	2022      	movs	r0, #34	; 0x22
 800228c:	f000 f984 	bl	8002598 <osIRQHandler>
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)                  {osIRQHandler(SPI1_IRQn);}                  /* SPI1                                        */
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
 8002298:	2023      	movs	r0, #35	; 0x23
 800229a:	f000 f97d 	bl	8002598 <osIRQHandler>
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)                  {osIRQHandler(SPI2_IRQn);}                  /* SPI2                                        */
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	2024      	movs	r0, #36	; 0x24
 80022a8:	f000 f976 	bl	8002598 <osIRQHandler>
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)                {osIRQHandler(USART1_IRQn);}                /* USART1                                      */
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	2025      	movs	r0, #37	; 0x25
 80022b6:	f000 f96f 	bl	8002598 <osIRQHandler>
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}

080022be <USART2_IRQHandler>:
void USART2_IRQHandler(void)                {osIRQHandler(USART2_IRQn);}                /* USART2                                      */
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	2026      	movs	r0, #38	; 0x26
 80022c4:	f000 f968 	bl	8002598 <osIRQHandler>
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <USART3_IRQHandler>:
void USART3_IRQHandler(void)                {osIRQHandler(USART3_IRQn);}                /* USART3                                      */
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	2027      	movs	r0, #39	; 0x27
 80022d2:	f000 f961 	bl	8002598 <osIRQHandler>
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}

080022da <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)             {osIRQHandler(EXTI15_10_IRQn);}             /* External Line[15:10]s                       */
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
 80022de:	2028      	movs	r0, #40	; 0x28
 80022e0:	f000 f95a 	bl	8002598 <osIRQHandler>
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)             {osIRQHandler(RTC_Alarm_IRQn);}             /* RTC Alarm (A and B) through EXTI Line       */
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	2029      	movs	r0, #41	; 0x29
 80022ee:	f000 f953 	bl	8002598 <osIRQHandler>
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <OTG_FS_WKUP_IRQHandler>:
void OTG_FS_WKUP_IRQHandler(void)           {osIRQHandler(OTG_FS_WKUP_IRQn);}           /* USB OTG FS Wakeup through EXTI line         */
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	202a      	movs	r0, #42	; 0x2a
 80022fc:	f000 f94c 	bl	8002598 <osIRQHandler>
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}

08002304 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)        {osIRQHandler(TIM8_BRK_TIM12_IRQn);}        /* TIM8 Break and TIM12                        */
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
 8002308:	202b      	movs	r0, #43	; 0x2b
 800230a:	f000 f945 	bl	8002598 <osIRQHandler>
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}

08002312 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)         {osIRQHandler(TIM8_UP_TIM13_IRQn);}         /* TIM8 Update and TIM13                       */
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
 8002316:	202c      	movs	r0, #44	; 0x2c
 8002318:	f000 f93e 	bl	8002598 <osIRQHandler>
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)    {osIRQHandler(TIM8_TRG_COM_TIM14_IRQn);}    /* TIM8 Trigger and Commutation and TIM14      */
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
 8002324:	202d      	movs	r0, #45	; 0x2d
 8002326:	f000 f937 	bl	8002598 <osIRQHandler>
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}

0800232e <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void)               {osIRQHandler(TIM8_CC_IRQn);}               /* TIM8 Capture Compare                        */
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
 8002332:	202e      	movs	r0, #46	; 0x2e
 8002334:	f000 f930 	bl	8002598 <osIRQHandler>
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)          {osIRQHandler(DMA1_Stream7_IRQn);}          /* DMA1 Stream7                                */
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
 8002340:	202f      	movs	r0, #47	; 0x2f
 8002342:	f000 f929 	bl	8002598 <osIRQHandler>
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <FMC_IRQHandler>:
void FMC_IRQHandler(void)                   {osIRQHandler(FMC_IRQn);}                   /* FMC                                         */
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
 800234e:	2030      	movs	r0, #48	; 0x30
 8002350:	f000 f922 	bl	8002598 <osIRQHandler>
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)                  {osIRQHandler(SDIO_IRQn);}                  /* SDIO                                        */
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
 800235c:	2031      	movs	r0, #49	; 0x31
 800235e:	f000 f91b 	bl	8002598 <osIRQHandler>
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}

08002366 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)                  {osIRQHandler(TIM5_IRQn);}                  /* TIM5                                        */
 8002366:	b580      	push	{r7, lr}
 8002368:	af00      	add	r7, sp, #0
 800236a:	2032      	movs	r0, #50	; 0x32
 800236c:	f000 f914 	bl	8002598 <osIRQHandler>
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)                  {osIRQHandler(SPI3_IRQn);}                  /* SPI3                                        */
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
 8002378:	2033      	movs	r0, #51	; 0x33
 800237a:	f000 f90d 	bl	8002598 <osIRQHandler>
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}

08002382 <UART4_IRQHandler>:
void UART4_IRQHandler(void)                 {osIRQHandler(UART4_IRQn);}                 /* UART4                                       */
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
 8002386:	2034      	movs	r0, #52	; 0x34
 8002388:	f000 f906 	bl	8002598 <osIRQHandler>
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <UART5_IRQHandler>:
void UART5_IRQHandler(void)                 {osIRQHandler(UART5_IRQn);}                 /* UART5                                       */
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
 8002394:	2035      	movs	r0, #53	; 0x35
 8002396:	f000 f8ff 	bl	8002598 <osIRQHandler>
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}

0800239e <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)              {osIRQHandler(TIM6_DAC_IRQn);}              /* TIM6 and DAC1&2 underrun errors             */
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	2036      	movs	r0, #54	; 0x36
 80023a4:	f000 f8f8 	bl	8002598 <osIRQHandler>
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)                  {osIRQHandler(TIM7_IRQn);}                  /* TIM7                                        */
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	2037      	movs	r0, #55	; 0x37
 80023b2:	f000 f8f1 	bl	8002598 <osIRQHandler>
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}

080023ba <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)          {osIRQHandler(DMA2_Stream0_IRQn);}          /* DMA2 Stream 0                               */
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
 80023be:	2038      	movs	r0, #56	; 0x38
 80023c0:	f000 f8ea 	bl	8002598 <osIRQHandler>
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)          {osIRQHandler(DMA2_Stream1_IRQn);}          /* DMA2 Stream 1                               */
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	2039      	movs	r0, #57	; 0x39
 80023ce:	f000 f8e3 	bl	8002598 <osIRQHandler>
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)          {osIRQHandler(DMA2_Stream2_IRQn);}          /* DMA2 Stream 2                               */
 80023d6:	b580      	push	{r7, lr}
 80023d8:	af00      	add	r7, sp, #0
 80023da:	203a      	movs	r0, #58	; 0x3a
 80023dc:	f000 f8dc 	bl	8002598 <osIRQHandler>
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)          {osIRQHandler(DMA2_Stream3_IRQn);}          /* DMA2 Stream 3                               */
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	203b      	movs	r0, #59	; 0x3b
 80023ea:	f000 f8d5 	bl	8002598 <osIRQHandler>
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)          {osIRQHandler(DMA2_Stream4_IRQn);}          /* DMA2 Stream 4                               */
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	203c      	movs	r0, #60	; 0x3c
 80023f8:	f000 f8ce 	bl	8002598 <osIRQHandler>
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <ETH_IRQHandler>:
void ETH_IRQHandler(void)                   {osIRQHandler(ETH_IRQn);}                   /* Ethernet                                    */
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
 8002404:	203d      	movs	r0, #61	; 0x3d
 8002406:	f000 f8c7 	bl	8002598 <osIRQHandler>
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}

0800240e <ETH_WKUP_IRQHandler>:
void ETH_WKUP_IRQHandler(void)              {osIRQHandler(ETH_WKUP_IRQn);}              /* Ethernet Wakeup through EXTI line           */
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
 8002412:	203e      	movs	r0, #62	; 0x3e
 8002414:	f000 f8c0 	bl	8002598 <osIRQHandler>
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <CAN2_TX_IRQHandler>:
void CAN2_TX_IRQHandler(void)               {osIRQHandler(CAN2_TX_IRQn);}               /* CAN2 TX                                     */
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
 8002420:	203f      	movs	r0, #63	; 0x3f
 8002422:	f000 f8b9 	bl	8002598 <osIRQHandler>
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}

0800242a <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)              {osIRQHandler(CAN2_RX0_IRQn);}              /* CAN2 RX0                                    */
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
 800242e:	2040      	movs	r0, #64	; 0x40
 8002430:	f000 f8b2 	bl	8002598 <osIRQHandler>
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void)              {osIRQHandler(CAN2_RX1_IRQn);}              /* CAN2 RX1                                    */
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
 800243c:	2041      	movs	r0, #65	; 0x41
 800243e:	f000 f8ab 	bl	8002598 <osIRQHandler>
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}

08002446 <CAN2_SCE_IRQHandler>:
void CAN2_SCE_IRQHandler(void)              {osIRQHandler(CAN2_SCE_IRQn);}              /* CAN2 SCE                                    */
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
 800244a:	2042      	movs	r0, #66	; 0x42
 800244c:	f000 f8a4 	bl	8002598 <osIRQHandler>
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)                {osIRQHandler(OTG_FS_IRQn);}                /* USB OTG FS                                  */
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
 8002458:	2043      	movs	r0, #67	; 0x43
 800245a:	f000 f89d 	bl	8002598 <osIRQHandler>
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}

08002462 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)          {osIRQHandler(DMA2_Stream5_IRQn);}          /* DMA2 Stream 5                               */
 8002462:	b580      	push	{r7, lr}
 8002464:	af00      	add	r7, sp, #0
 8002466:	2044      	movs	r0, #68	; 0x44
 8002468:	f000 f896 	bl	8002598 <osIRQHandler>
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)          {osIRQHandler(DMA2_Stream6_IRQn);}          /* DMA2 Stream 6                               */
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
 8002474:	2045      	movs	r0, #69	; 0x45
 8002476:	f000 f88f 	bl	8002598 <osIRQHandler>
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}

0800247e <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)          {osIRQHandler(DMA2_Stream7_IRQn);}          /* DMA2 Stream 7                               */
 800247e:	b580      	push	{r7, lr}
 8002480:	af00      	add	r7, sp, #0
 8002482:	2046      	movs	r0, #70	; 0x46
 8002484:	f000 f888 	bl	8002598 <osIRQHandler>
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <USART6_IRQHandler>:
void USART6_IRQHandler(void)                {osIRQHandler(USART6_IRQn);}                /* USART6                                      */
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
 8002490:	2047      	movs	r0, #71	; 0x47
 8002492:	f000 f881 	bl	8002598 <osIRQHandler>
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)               {osIRQHandler(I2C3_EV_IRQn);}               /* I2C3 event                                  */
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
 800249e:	2048      	movs	r0, #72	; 0x48
 80024a0:	f000 f87a 	bl	8002598 <osIRQHandler>
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C3_ER_IRQHandler>:
void I2C3_ER_IRQHandler(void)               {osIRQHandler(I2C3_ER_IRQn);}               /* I2C3 error                                  */
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	2049      	movs	r0, #73	; 0x49
 80024ae:	f000 f873 	bl	8002598 <osIRQHandler>
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <OTG_HS_EP1_OUT_IRQHandler>:
void OTG_HS_EP1_OUT_IRQHandler(void)        {osIRQHandler(OTG_HS_EP1_OUT_IRQn);}        /* USB OTG HS End Point 1 Out                  */
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	204a      	movs	r0, #74	; 0x4a
 80024bc:	f000 f86c 	bl	8002598 <osIRQHandler>
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <OTG_HS_EP1_IN_IRQHandler>:
void OTG_HS_EP1_IN_IRQHandler(void)         {osIRQHandler(OTG_HS_EP1_IN_IRQn);}         /* USB OTG HS End Point 1 In                   */
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	204b      	movs	r0, #75	; 0x4b
 80024ca:	f000 f865 	bl	8002598 <osIRQHandler>
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <OTG_HS_WKUP_IRQHandler>:
void OTG_HS_WKUP_IRQHandler(void)           {osIRQHandler(OTG_HS_WKUP_IRQn);}           /* USB OTG HS Wakeup through EXTI              */
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	204c      	movs	r0, #76	; 0x4c
 80024d8:	f000 f85e 	bl	8002598 <osIRQHandler>
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)                {osIRQHandler(OTG_HS_IRQn);}                /* USB OTG HS                                  */
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	204d      	movs	r0, #77	; 0x4d
 80024e6:	f000 f857 	bl	8002598 <osIRQHandler>
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}

080024ee <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)                  {osIRQHandler(DCMI_IRQn);}                  /* DCMI                                        */
 80024ee:	b580      	push	{r7, lr}
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	204e      	movs	r0, #78	; 0x4e
 80024f4:	f000 f850 	bl	8002598 <osIRQHandler>
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HASH_RNG_IRQHandler>:
void HASH_RNG_IRQHandler(void)              {osIRQHandler(HASH_RNG_IRQn);}              /* Hash and Rng                                */
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
 8002500:	2050      	movs	r0, #80	; 0x50
 8002502:	f000 f849 	bl	8002598 <osIRQHandler>
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}

0800250a <FPU_IRQHandler>:
void FPU_IRQHandler(void)                   {osIRQHandler(FPU_IRQn);}                   /* FPU                                         */
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
 800250e:	2051      	movs	r0, #81	; 0x51
 8002510:	f000 f842 	bl	8002598 <osIRQHandler>
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <UART7_IRQHandler>:
void UART7_IRQHandler(void)                 {osIRQHandler(UART7_IRQn);}                 /* UART7                                       */
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
 800251c:	2052      	movs	r0, #82	; 0x52
 800251e:	f000 f83b 	bl	8002598 <osIRQHandler>
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}

08002526 <UART8_IRQHandler>:
void UART8_IRQHandler(void)                 {osIRQHandler(UART8_IRQn);}                 /* UART8                                       */
 8002526:	b580      	push	{r7, lr}
 8002528:	af00      	add	r7, sp, #0
 800252a:	2053      	movs	r0, #83	; 0x53
 800252c:	f000 f834 	bl	8002598 <osIRQHandler>
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)                  {osIRQHandler(SPI4_IRQn);}                  /* SPI4                                        */
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
 8002538:	2054      	movs	r0, #84	; 0x54
 800253a:	f000 f82d 	bl	8002598 <osIRQHandler>
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}

08002542 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)                  {osIRQHandler(SPI5_IRQn);}                  /* SPI5 						               */
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0
 8002546:	2055      	movs	r0, #85	; 0x55
 8002548:	f000 f826 	bl	8002598 <osIRQHandler>
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)                  {osIRQHandler(SPI6_IRQn);}                  /* SPI6						                   */
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
 8002554:	2056      	movs	r0, #86	; 0x56
 8002556:	f000 f81f 	bl	8002598 <osIRQHandler>
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}

0800255e <SAI1_IRQHandler>:
void SAI1_IRQHandler(void)                  {osIRQHandler(SAI1_IRQn);}                  /* SAI1						                   */
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
 8002562:	2057      	movs	r0, #87	; 0x57
 8002564:	f000 f818 	bl	8002598 <osIRQHandler>
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)                  {osIRQHandler(LTDC_IRQn);}                  /* LTDC_IRQHandler			                   */
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
 8002570:	2058      	movs	r0, #88	; 0x58
 8002572:	f000 f811 	bl	8002598 <osIRQHandler>
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}

0800257a <LTDC_ER_IRQHandler>:
void LTDC_ER_IRQHandler(void)               {osIRQHandler(LTDC_ER_IRQn);}               /* LTDC_ER_IRQHandler			               */
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
 800257e:	2059      	movs	r0, #89	; 0x59
 8002580:	f000 f80a 	bl	8002598 <osIRQHandler>
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)                 {osIRQHandler(DMA2D_IRQn);}                 /* DMA2D                                       */
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
 800258c:	205a      	movs	r0, #90	; 0x5a
 800258e:	f000 f803 	bl	8002598 <osIRQHandler>
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <osIRQHandler>:

void osIRQHandler(osIRQnType irqType)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
	osStatus_t prevState = osGetCurrentStatus();
 80025a2:	f000 f9ad 	bl	8002900 <osGetCurrentStatus>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73fb      	strb	r3, [r7, #15]

	osUpdateStatus(OS_STATUS_IRQ);
 80025aa:	2002      	movs	r0, #2
 80025ac:	f000 f9b4 	bl	8002918 <osUpdateStatus>
	(irqVector[irqType].handler)(irqVector[irqType].data);
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <osIRQHandler+0x60>)
 80025b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	490e      	ldr	r1, [pc, #56]	; (80025f8 <osIRQHandler+0x60>)
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	4790      	blx	r2
	osUpdateStatus(prevState);
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f9a3 	bl	8002918 <osUpdateStatus>

	if (getReschedulingISR())
 80025d2:	f000 f9cd 	bl	8002970 <getReschedulingISR>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <osIRQHandler+0x4c>
	{
		clearReschedulingISR();
 80025dc:	f000 f9ba 	bl	8002954 <clearReschedulingISR>
		osReschedule();
 80025e0:	f000 f9d2 	bl	8002988 <osReschedule>
	}

	NVIC_ClearPendingIRQ(irqType);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fd47 	bl	800207c <__NVIC_ClearPendingIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000308 	.word	0x20000308

080025fc <__NVIC_EnableIRQ>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <__NVIC_DisableIRQ>:
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db12      	blt.n	8002670 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	490a      	ldr	r1, [pc, #40]	; (800267c <__NVIC_DisableIRQ+0x44>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	3320      	adds	r3, #32
 8002660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002664:	f3bf 8f4f 	dsb	sy
}
 8002668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800266a:	f3bf 8f6f 	isb	sy
}
 800266e:	bf00      	nop
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ffc2 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <osTaskCreate>:
static void scheduler(void);

/* ================ Public functions implementation ================ */

osError_t osTaskCreate(osTaskObject * ptrTaskHandler, osPriorityType taskPriority, void * ptrTaskCallback)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	460b      	mov	r3, r1
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	72fb      	strb	r3, [r7, #11]

    // Check that arguments are not NULL
    if ( (ptrTaskHandler == NULL) || (ptrTaskCallback == NULL) )
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <osTaskCreate+0x1a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <osTaskCreate+0x1e>
    {
    	return OS_ERR_INVALID_PTR;
 8002732:	2302      	movs	r3, #2
 8002734:	e04b      	b.n	80027ce <osTaskCreate+0xb6>
    }

    // Check if there's available tasks to allocate
    if (osCore.tasksCounter >= OS_MAX_TASKS)
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <osTaskCreate+0xc4>)
 8002738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273c:	2b07      	cmp	r3, #7
 800273e:	d901      	bls.n	8002744 <osTaskCreate+0x2c>
    {
        return OS_ERR_MAX_TASKS;
 8002740:	2301      	movs	r3, #1
 8002742:	e044      	b.n	80027ce <osTaskCreate+0xb6>
        Arrange the STACK Frame for the first time:
        1) Set bit 24 of xPSR to make sure we are executing THUMB instructions
        2) PC must contain the task entry point (ptrTaskCallback)
        3) Set the link register to EXEC_RETURN_VALUE to trigger
    */
    ptrTaskHandler->taskStack[OS_MAX_STACK_SIZE/4 - XPSR_REG_POSITION]      = XPSR_VALUE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    ptrTaskHandler->taskStack[OS_MAX_STACK_SIZE/4 - PC_REG_POSITION]        = (uint32_t)ptrTaskCallback;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    ptrTaskHandler->taskStack[OS_MAX_STACK_SIZE/4 - LR_PREV_VALUE_POSITION] = EXEC_RETURN_VALUE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f06f 0206 	mvn.w	r2, #6
 800275c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc


    ptrTaskHandler->taskStackPointer = (uint32_t)(ptrTaskHandler->taskStack + OS_MAX_STACK_SIZE/4 - OS_STACK_FRAME_SIZE);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	33bc      	adds	r3, #188	; 0xbc
 8002764:	461a      	mov	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ptrTaskHandler->ptrTaskEntryPoint = ptrTaskCallback;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ptrTaskHandler->taskExecStatus = OS_TASK_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    osCore.tasksCounter++;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <osTaskCreate+0xc4>)
 800277e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002782:	3301      	adds	r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <osTaskCreate+0xc4>)
 8002788:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ptrTaskHandler->taskID = osCore.tasksCounter;
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <osTaskCreate+0xc4>)
 800278e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    ptrTaskHandler->taskPriority = taskPriority;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	7afa      	ldrb	r2, [r7, #11]
 800279c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

    // Fill controls OS structure
    osCore.ptrTaskList[osCore.tasksCounter - 1] = ptrTaskHandler;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <osTaskCreate+0xc4>)
 80027a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027a6:	3b01      	subs	r3, #1
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <osTaskCreate+0xc4>)
 80027aa:	3304      	adds	r3, #4
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (osCore.tasksCounter < OS_MAX_TASKS)
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <osTaskCreate+0xc4>)
 80027b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027b8:	2b07      	cmp	r3, #7
 80027ba:	d807      	bhi.n	80027cc <osTaskCreate+0xb4>
	{
    	osCore.ptrTaskList[osCore.tasksCounter] = NULL;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <osTaskCreate+0xc4>)
 80027be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027c2:	4a06      	ldr	r2, [pc, #24]	; (80027dc <osTaskCreate+0xc4>)
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

    return OS_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	200005e0 	.word	0x200005e0

080027e0 <osStart>:


void osStart(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
	uint8_t i, row, col;

	// Disable Systick and PendSV interrupts
    NVIC_DisableIRQ(SysTick_IRQn);
 80027e6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ea:	f7ff ff25 	bl	8002638 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PendSV_IRQn);
 80027ee:	f06f 0001 	mvn.w	r0, #1
 80027f2:	f7ff ff21 	bl	8002638 <__NVIC_DisableIRQ>

    osCore.requestedSchedulingISR = 0;
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <osStart+0x10c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    osCore.execStatus = OS_STATUS_RESET;		// Set the system to RESET for the first time
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <osStart+0x10c>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
    osCore.ptrCurrTask = NULL;      			// Set the current task to NULL the first time
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <osStart+0x10c>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
    osCore.ptrNextTask = NULL;      			// Set the next task to NULL the first time
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <osStart+0x10c>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]

    osTaskCreate(&idleTask, TASK_PRIORITY_3, osIdleTask);
 8002810:	4a37      	ldr	r2, [pc, #220]	; (80028f0 <osStart+0x110>)
 8002812:	2103      	movs	r1, #3
 8002814:	4837      	ldr	r0, [pc, #220]	; (80028f4 <osStart+0x114>)
 8002816:	f7ff ff7f 	bl	8002718 <osTaskCreate>

    // Completa la tabla de tareas dividida por prioridades
    for(i = 0; i < osCore.tasksCounter;i++)
 800281a:	2300      	movs	r3, #0
 800281c:	71fb      	strb	r3, [r7, #7]
 800281e:	e042      	b.n	80028a6 <osStart+0xc6>
    {
    	switch(osCore.ptrTaskList[i]->taskPriority)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4a32      	ldr	r2, [pc, #200]	; (80028ec <osStart+0x10c>)
 8002824:	3304      	adds	r3, #4
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800282e:	2b03      	cmp	r3, #3
 8002830:	d816      	bhi.n	8002860 <osStart+0x80>
 8002832:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <osStart+0x58>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	08002849 	.word	0x08002849
 800283c:	0800284f 	.word	0x0800284f
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285b 	.word	0x0800285b
    	{
    	case TASK_PRIORITY_0:

    		row = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	71bb      	strb	r3, [r7, #6]
    		break;
 800284c:	e008      	b.n	8002860 <osStart+0x80>

    	case TASK_PRIORITY_1:

    		row = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	71bb      	strb	r3, [r7, #6]
    		break;
 8002852:	e005      	b.n	8002860 <osStart+0x80>

    	case TASK_PRIORITY_2:

    		row = 2;
 8002854:	2302      	movs	r3, #2
 8002856:	71bb      	strb	r3, [r7, #6]
    		break;
 8002858:	e002      	b.n	8002860 <osStart+0x80>

    	case TASK_PRIORITY_3:

    		row = 3;
 800285a:	2303      	movs	r3, #3
 800285c:	71bb      	strb	r3, [r7, #6]
    		break;
 800285e:	bf00      	nop
    	}

    	col = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
    	while(osCore.taskPriorityTable[row][col] != 0)
 8002864:	e002      	b.n	800286c <osStart+0x8c>
    		col++;
 8002866:	797b      	ldrb	r3, [r7, #5]
 8002868:	3301      	adds	r3, #1
 800286a:	717b      	strb	r3, [r7, #5]
    	while(osCore.taskPriorityTable[row][col] != 0)
 800286c:	79ba      	ldrb	r2, [r7, #6]
 800286e:	797b      	ldrb	r3, [r7, #5]
 8002870:	491e      	ldr	r1, [pc, #120]	; (80028ec <osStart+0x10c>)
 8002872:	00d2      	lsls	r2, r2, #3
 8002874:	440a      	add	r2, r1
 8002876:	4413      	add	r3, r2
 8002878:	3331      	adds	r3, #49	; 0x31
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <osStart+0x86>

    	osCore.taskPriorityTable[row][col] = osCore.ptrTaskList[i]->taskID;
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4a1a      	ldr	r2, [pc, #104]	; (80028ec <osStart+0x10c>)
 8002884:	3304      	adds	r3, #4
 8002886:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800288a:	79ba      	ldrb	r2, [r7, #6]
 800288c:	797b      	ldrb	r3, [r7, #5]
 800288e:	f891 0109 	ldrb.w	r0, [r1, #265]	; 0x109
 8002892:	4916      	ldr	r1, [pc, #88]	; (80028ec <osStart+0x10c>)
 8002894:	00d2      	lsls	r2, r2, #3
 8002896:	440a      	add	r2, r1
 8002898:	4413      	add	r3, r2
 800289a:	3331      	adds	r3, #49	; 0x31
 800289c:	4602      	mov	r2, r0
 800289e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < osCore.tasksCounter;i++)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	3301      	adds	r3, #1
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <osStart+0x10c>)
 80028a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ac:	79fa      	ldrb	r2, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3b6      	bcc.n	8002820 <osStart+0x40>

    }

    // Is mandatory to set the PendSV priority as lowest as possible */
    NVIC_SetPriority(PendSV_IRQn, (1 << __NVIC_PRIO_BITS)-1);
 80028b2:	210f      	movs	r1, #15
 80028b4:	f06f 0001 	mvn.w	r0, #1
 80028b8:	f7ff fee2 	bl	8002680 <__NVIC_SetPriority>

    // Activate and configure the Systick exception
    SystemCoreClockUpdate();
 80028bc:	f7fe f8ce 	bl	8000a5c <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / (1000U * SYSTICK_PERIOD_MS));
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <osStart+0x118>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <osStart+0x11c>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	099b      	lsrs	r3, r3, #6
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff01 	bl	80026d4 <SysTick_Config>

    // Enable Systick and PendSV interrupts
    NVIC_EnableIRQ(PendSV_IRQn);
 80028d2:	f06f 0001 	mvn.w	r0, #1
 80028d6:	f7ff fe91 	bl	80025fc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(SysTick_IRQn);
 80028da:	f04f 30ff 	mov.w	r0, #4294967295
 80028de:	f7ff fe8d 	bl	80025fc <__NVIC_EnableIRQ>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200005e0 	.word	0x200005e0
 80028f0:	08002a41 	.word	0x08002a41
 80028f4:	20000634 	.word	0x20000634
 80028f8:	20000004 	.word	0x20000004
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <osGetCurrentStatus>:
{
	return osCore.ptrCurrTask;
}

osStatus_t osGetCurrentStatus(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
	return osCore.execStatus;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <osGetCurrentStatus+0x14>)
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200005e0 	.word	0x200005e0

08002918 <osUpdateStatus>:

void osUpdateStatus(osStatus_t status)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
	osCore.execStatus = status;
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <osUpdateStatus+0x1c>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	7013      	strb	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	200005e0 	.word	0x200005e0

08002938 <setReschedulingISR>:

void setReschedulingISR(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
	osCore.requestedSchedulingISR = 1;
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <setReschedulingISR+0x18>)
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	200005e0 	.word	0x200005e0

08002954 <clearReschedulingISR>:

void clearReschedulingISR(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
	osCore.requestedSchedulingISR = 0;
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <clearReschedulingISR+0x18>)
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200005e0 	.word	0x200005e0

08002970 <getReschedulingISR>:

uint8_t getReschedulingISR(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
	return osCore.requestedSchedulingISR;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <getReschedulingISR+0x14>)
 8002976:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	200005e0 	.word	0x200005e0

08002988 <osReschedule>:


void osReschedule(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(SysTick_IRQn);
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff fe52 	bl	8002638 <__NVIC_DisableIRQ>

	scheduler();
 8002994:	f000 f896 	bl	8002ac4 <scheduler>

	SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <osReschedule+0x30>)
 800299a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
 80029a0:	f3bf 8f6f 	isb	sy
}
 80029a4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80029a6:	f3bf 8f4f 	dsb	sy
}
 80029aa:	bf00      	nop

	__ISB();
	__DSB();

	NVIC_EnableIRQ(SysTick_IRQn);
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f7ff fe24 	bl	80025fc <__NVIC_EnableIRQ>
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <osDelay>:

void osDelay(const uint32_t tick)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	if(tick > 0)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d029      	beq.n	8002a1e <osDelay+0x62>
	{
		/* Disable SysTick_IRQn so is not invocated in here */
		NVIC_DisableIRQ(SysTick_IRQn);
 80029ca:	f04f 30ff 	mov.w	r0, #4294967295
 80029ce:	f7ff fe33 	bl	8002638 <__NVIC_DisableIRQ>

		(osCore.ptrTaskList[osCore.runningTaskID - 1])->taskDelay = tick;
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <osDelay+0x6c>)
 80029d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d8:	3b01      	subs	r3, #1
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <osDelay+0x6c>)
 80029dc:	3304      	adds	r3, #4
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		(osCore.ptrTaskList[osCore.runningTaskID - 1])->taskExecStatus = OS_TASK_BLOCKED;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <osDelay+0x6c>)
 80029ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ee:	3b01      	subs	r3, #1
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <osDelay+0x6c>)
 80029f2:	3304      	adds	r3, #4
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

		/* We need to reschedule */
		scheduler();
 80029fe:	f000 f861 	bl	8002ac4 <scheduler>

		/*
		 * Set up bit corresponding exception PendSV
		 */
		SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <osDelay+0x70>)
 8002a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a08:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
 8002a0a:	f3bf 8f6f 	isb	sy
}
 8002a0e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002a10:	f3bf 8f4f 	dsb	sy
}
 8002a14:	bf00      	nop
		 * Data Synchronization Barrier; ensures that all memory accesses are
		 * completed before next instruction is executed
		 */
		__DSB();
		/* Enable SysTick_IRQn again */
		NVIC_EnableIRQ(SysTick_IRQn);
 8002a16:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1a:	f7ff fdef 	bl	80025fc <__NVIC_EnableIRQ>
	}
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200005e0 	.word	0x200005e0
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <osSysTickHook>:
        __WFI();
    }
}

WEAK void osSysTickHook(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
    __ASM volatile ("nop");
 8002a34:	bf00      	nop
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <osIdleTask>:
    {
    }
}

WEAK void osIdleTask(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
    while(1)
    {
    	__WFI();
 8002a44:	bf30      	wfi
 8002a46:	e7fd      	b.n	8002a44 <osIdleTask+0x4>

08002a48 <getNextContext>:
}

/* ================ Private functions implementation ================ */

static uint32_t getNextContext(uint32_t currentStackPointer)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    if (osCore.execStatus != OS_STATUS_RUNNING)
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <getNextContext+0x78>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <getNextContext+0x22>
    {
    	osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <getNextContext+0x78>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    	osCore.execStatus = OS_STATUS_RUNNING;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <getNextContext+0x78>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e018      	b.n	8002a9c <getNextContext+0x54>
    }
    else
    {
        // Storage last stack pointer used on current task and change state to ready
        osCore.ptrCurrTask->taskStackPointer = currentStackPointer;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <getNextContext+0x78>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if(osCore.ptrCurrTask->taskExecStatus == OS_TASK_RUNNING)
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <getNextContext+0x78>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d104      	bne.n	8002a8a <getNextContext+0x42>
        	osCore.ptrCurrTask->taskExecStatus = OS_TASK_READY;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <getNextContext+0x78>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

        // Switch address memory points on current task for next task and change state of task
        osCore.ptrCurrTask = osCore.ptrNextTask;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <getNextContext+0x78>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <getNextContext+0x78>)
 8002a90:	6093      	str	r3, [r2, #8]
        osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <getNextContext+0x78>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    }

    osCore.runningTaskID = osCore.ptrCurrTask->taskID;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <getNextContext+0x78>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <getNextContext+0x78>)
 8002aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    return osCore.ptrCurrTask->taskStackPointer;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <getNextContext+0x78>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200005e0 	.word	0x200005e0

08002ac4 <scheduler>:

static void scheduler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
	uint8_t row, col, id = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	717b      	strb	r3, [r7, #5]

    // Check if this is the first scheduler execution
    if (osCore.execStatus != OS_STATUS_RUNNING)
 8002ace:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <scheduler+0x16c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00e      	beq.n	8002af4 <scheduler+0x30>
    {
    	// ejecuta la tarea idle una vez antes que el resto
    	osCore.ptrCurrTask = osCore.ptrTaskList[osCore.tasksCounter - 1];				// If the OS wasn't running load the first task to be run
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <scheduler+0x16c>)
 8002ad8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002adc:	3b01      	subs	r3, #1
 8002ade:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <scheduler+0x16c>)
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	4a52      	ldr	r2, [pc, #328]	; (8002c30 <scheduler+0x16c>)
 8002ae8:	6093      	str	r3, [r2, #8]
    	osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 8002aea:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <scheduler+0x16c>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    }

    // Recorriendo desde coordenada 0,0 de la prioridad mas alta, busca la primera tarea en estado READY
	row = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	71fb      	strb	r3, [r7, #7]
	do
	{
		if(osCore.taskPriorityTable[row][0] != 0)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	4a4d      	ldr	r2, [pc, #308]	; (8002c30 <scheduler+0x16c>)
 8002afc:	3306      	adds	r3, #6
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d021      	beq.n	8002b4c <scheduler+0x88>
		{
			col = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	71bb      	strb	r3, [r7, #6]
			do
			{
				id = osCore.taskPriorityTable[row][col];
 8002b0c:	79fa      	ldrb	r2, [r7, #7]
 8002b0e:	79bb      	ldrb	r3, [r7, #6]
 8002b10:	4947      	ldr	r1, [pc, #284]	; (8002c30 <scheduler+0x16c>)
 8002b12:	00d2      	lsls	r2, r2, #3
 8002b14:	440a      	add	r2, r1
 8002b16:	4413      	add	r3, r2
 8002b18:	3331      	adds	r3, #49	; 0x31
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	717b      	strb	r3, [r7, #5]
				col++;
 8002b1e:	79bb      	ldrb	r3, [r7, #6]
 8002b20:	3301      	adds	r3, #1
 8002b22:	71bb      	strb	r3, [r7, #6]
			}
			while( (osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED) &&
 8002b24:	797b      	ldrb	r3, [r7, #5]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <scheduler+0x16c>)
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b30:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d109      	bne.n	8002b4c <scheduler+0x88>
					(osCore.taskPriorityTable[row][col] != 0) );
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	79bb      	ldrb	r3, [r7, #6]
 8002b3c:	493c      	ldr	r1, [pc, #240]	; (8002c30 <scheduler+0x16c>)
 8002b3e:	00d2      	lsls	r2, r2, #3
 8002b40:	440a      	add	r2, r1
 8002b42:	4413      	add	r3, r2
 8002b44:	3331      	adds	r3, #49	; 0x31
 8002b46:	781b      	ldrb	r3, [r3, #0]
			while( (osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED) &&
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1df      	bne.n	8002b0c <scheduler+0x48>
		}
		row++;
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	71fb      	strb	r3, [r7, #7]
	}
	while( osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED ||
 8002b52:	797b      	ldrb	r3, [r7, #5]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <scheduler+0x16c>)
 8002b58:	3304      	adds	r3, #4
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d0c8      	beq.n	8002af8 <scheduler+0x34>
 8002b66:	797b      	ldrb	r3, [r7, #5]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0c5      	beq.n	8002af8 <scheduler+0x34>
			id == 0 );

	if(osCore.ptrCurrTask->taskPriority == osCore.ptrTaskList[id - 1]->taskPriority )
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <scheduler+0x16c>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 8002b74:	797b      	ldrb	r3, [r7, #5]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	492d      	ldr	r1, [pc, #180]	; (8002c30 <scheduler+0x16c>)
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b80:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d145      	bne.n	8002c14 <scheduler+0x150>
	{
		col--;
 8002b88:	79bb      	ldrb	r3, [r7, #6]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	71bb      	strb	r3, [r7, #6]
		row--;
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	71fb      	strb	r3, [r7, #7]
		do
		{
			if(osCore.taskPriorityTable[row][col] == 0)
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	79bb      	ldrb	r3, [r7, #6]
 8002b98:	4925      	ldr	r1, [pc, #148]	; (8002c30 <scheduler+0x16c>)
 8002b9a:	00d2      	lsls	r2, r2, #3
 8002b9c:	440a      	add	r2, r1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3331      	adds	r3, #49	; 0x31
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <scheduler+0xe8>
				col = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	71bb      	strb	r3, [r7, #6]

			id = osCore.taskPriorityTable[row][col];
 8002bac:	79fa      	ldrb	r2, [r7, #7]
 8002bae:	79bb      	ldrb	r3, [r7, #6]
 8002bb0:	491f      	ldr	r1, [pc, #124]	; (8002c30 <scheduler+0x16c>)
 8002bb2:	00d2      	lsls	r2, r2, #3
 8002bb4:	440a      	add	r2, r1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3331      	adds	r3, #49	; 0x31
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	717b      	strb	r3, [r7, #5]
			col++;
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	71bb      	strb	r3, [r7, #6]
		}
		while(osCore.runningTaskID != id);
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <scheduler+0x16c>)
 8002bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bca:	797a      	ldrb	r2, [r7, #5]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1e1      	bne.n	8002b94 <scheduler+0xd0>

		do
		{
			if(osCore.taskPriorityTable[row][col] == 0)
 8002bd0:	79fa      	ldrb	r2, [r7, #7]
 8002bd2:	79bb      	ldrb	r3, [r7, #6]
 8002bd4:	4916      	ldr	r1, [pc, #88]	; (8002c30 <scheduler+0x16c>)
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	440a      	add	r2, r1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3331      	adds	r3, #49	; 0x31
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <scheduler+0x124>
				col = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	71bb      	strb	r3, [r7, #6]

			id = osCore.taskPriorityTable[row][col];
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	79bb      	ldrb	r3, [r7, #6]
 8002bec:	4910      	ldr	r1, [pc, #64]	; (8002c30 <scheduler+0x16c>)
 8002bee:	00d2      	lsls	r2, r2, #3
 8002bf0:	440a      	add	r2, r1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3331      	adds	r3, #49	; 0x31
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	717b      	strb	r3, [r7, #5]
			col++;
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	71bb      	strb	r3, [r7, #6]
		}
		while(osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED);
 8002c00:	797b      	ldrb	r3, [r7, #5]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <scheduler+0x16c>)
 8002c06:	3304      	adds	r3, #4
 8002c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d0dd      	beq.n	8002bd0 <scheduler+0x10c>

	}

	osCore.ptrNextTask = osCore.ptrTaskList[id - 1];			// Load next task to be run
 8002c14:	797b      	ldrb	r3, [r7, #5]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <scheduler+0x16c>)
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <scheduler+0x16c>)
 8002c22:	60d3      	str	r3, [r2, #12]

}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	200005e0 	.word	0x200005e0

08002c34 <SysTick_Handler>:

/* ========== Processor Interruption and Exception Handlers ========= */

void SysTick_Handler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
	uint8_t id;

    for(id = 1;id <= osCore.tasksCounter;id++)
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	71fb      	strb	r3, [r7, #7]
 8002c3e:	e034      	b.n	8002caa <SysTick_Handler+0x76>
    {
    	if( (osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED) && (osCore.ptrTaskList[id - 1]->taskDelay > 0) )
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <SysTick_Handler+0xa8>)
 8002c46:	3304      	adds	r3, #4
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d127      	bne.n	8002ca4 <SysTick_Handler+0x70>
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <SysTick_Handler+0xa8>)
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01d      	beq.n	8002ca4 <SysTick_Handler+0x70>
    	{
    		(osCore.ptrTaskList[id - 1]->taskDelay)--;
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <SysTick_Handler+0xa8>)
 8002c6e:	3304      	adds	r3, #4
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    		if(osCore.ptrTaskList[id - 1]->taskDelay == 0)
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <SysTick_Handler+0xa8>)
 8002c84:	3304      	adds	r3, #4
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <SysTick_Handler+0x70>
    			osCore.ptrTaskList[id - 1]->taskExecStatus = OS_TASK_READY;
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <SysTick_Handler+0xa8>)
 8002c98:	3304      	adds	r3, #4
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    for(id = 1;id <= osCore.tasksCounter;id++)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <SysTick_Handler+0xa8>)
 8002cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cb0:	79fa      	ldrb	r2, [r7, #7]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d9c4      	bls.n	8002c40 <SysTick_Handler+0xc>
    	}

    }

    scheduler();
 8002cb6:	f7ff ff05 	bl	8002ac4 <scheduler>
    osSysTickHook();
 8002cba:	f7ff feb9 	bl	8002a30 <osSysTickHook>

    /*
     * Set up bit corresponding exception PendSV
     */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <SysTick_Handler+0xac>)
 8002cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
 8002cc6:	f3bf 8f6f 	isb	sy
}
 8002cca:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002ccc:	f3bf 8f4f 	dsb	sy
}
 8002cd0:	bf00      	nop
    /*
     * Data Synchronization Barrier; ensures that all memory accesses are
     * completed before next instruction is executed
     */
    __DSB();
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200005e0 	.word	0x200005e0
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <PendSV_Handler>:
	 * el unico argumento pasado por RO, y el valor de retorno tambien se almacena en R0
	 *
	 * NOTA: El primer ingreso a este handler (luego del reset) implica que el push se hace sobre el
	 * stack inicial, ese stack se pierde porque no hay seguimiento del MSP en el primer ingreso
     */
    __ASM volatile ("push {r4-r11, lr}");
 8002ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    __ASM volatile ("mrs r0, msp");
 8002ce8:	f3ef 8008 	mrs	r0, MSP
    __ASM volatile ("bl %0" :: "i"(getNextContext));
 8002cec:	f7ff feac 	bl	8002a48 <getNextContext>
    __ASM volatile ("msr msp, r0");
 8002cf0:	f380 8808 	msr	MSP, r0
    __ASM volatile ("pop {r4-r11, lr}");    //Recuperados todos los valores de registros
 8002cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Se hace un branch indirect con el valor de LR que es nuevamente EXEC_RETURN */
    __ASM volatile ("bx lr");
 8002cf8:	4770      	bx	lr
}
 8002cfa:	bf00      	nop

08002cfc <__NVIC_EnableIRQ>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_ClearPendingIRQ>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0c      	blt.n	8002d64 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	; (8002d70 <__NVIC_ClearPendingIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	3360      	adds	r3, #96	; 0x60
 8002d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <osRegisterIRQ>:

#include "osIRQ.h"
#include <stddef.h>

bool osRegisterIRQ(osIRQnType irqType, IRQHandler function, void * data)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	73fb      	strb	r3, [r7, #15]
	bool registered = false;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]

	if( (data != NULL) && (function != NULL) )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d022      	beq.n	8002dd2 <osRegisterIRQ+0x5e>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01f      	beq.n	8002dd2 <osRegisterIRQ+0x5e>
	{
		if (irqVector[irqType].handler == NULL)
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <osRegisterIRQ+0x68>)
 8002d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d118      	bne.n	8002dd2 <osRegisterIRQ+0x5e>
		{
			irqVector[irqType].handler = function;
 8002da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da4:	490d      	ldr	r1, [pc, #52]	; (8002ddc <osRegisterIRQ+0x68>)
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			irqVector[irqType].data = data;
 8002dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <osRegisterIRQ+0x68>)
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]

			NVIC_ClearPendingIRQ(irqType);
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ffba 	bl	8002d38 <__NVIC_ClearPendingIRQ>
			NVIC_EnableIRQ(irqType);
 8002dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff97 	bl	8002cfc <__NVIC_EnableIRQ>

			registered = true;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	return registered;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000308 	.word	0x20000308

08002de0 <osQueueInit>:
 */

#include "osQueue.h"

bool osQueueInit(osQueueObject * queue, const uint32_t dataSize)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
	bool queueCreated = false;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]

	if( (queue != NULL) && (dataSize != 0) )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d019      	beq.n	8002e28 <osQueueInit+0x48>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <osQueueInit+0x48>
	{
		queue->qLength = 0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	711a      	strb	r2, [r3, #4]
		queue->qWaitingTask = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
		queue->qItemSizeBytes = dataSize;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	715a      	strb	r2, [r3, #5]
		queue->qBuffer = malloc(dataSize * MAX_SIZE_QUEUE);
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f85e 	bl	8002ed8 <malloc>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
	    queueCreated = true;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
	}

	return queueCreated;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <osSemaphoreInit>:
 */

#include "osSemaphore.h"

void osSemaphoreInit(osSemaphoreObject * semaphore, const uint32_t maxCount, const uint32_t count)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b0c8      	sub	sp, #288	; 0x120
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e40:	6018      	str	r0, [r3, #0]
 8002e42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e4a:	6019      	str	r1, [r3, #0]
 8002e4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e54:	601a      	str	r2, [r3, #0]
	osTaskObject task;

	if( (semaphore != NULL) && (maxCount >= count) && (maxCount > 0) )
 8002e56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d034      	beq.n	8002ece <osSemaphoreInit+0x9c>
 8002e64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e68:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002e6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d328      	bcc.n	8002ece <osSemaphoreInit+0x9c>
 8002e7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d021      	beq.n	8002ece <osSemaphoreInit+0x9c>
	{
		semaphore->count = count;
 8002e8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	701a      	strb	r2, [r3, #0]
		semaphore->maxCount = maxCount;
 8002ea2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ea6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002eb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	705a      	strb	r2, [r3, #1]

		osQueueInit(&(semaphore->waitingTask), sizeof(&task));
 8002eba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ebe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff89 	bl	8002de0 <osQueueInit>
	}
}
 8002ece:	bf00      	nop
 8002ed0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <malloc>:
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <malloc+0xc>)
 8002eda:	4601      	mov	r1, r0
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f000 b823 	b.w	8002f28 <_malloc_r>
 8002ee2:	bf00      	nop
 8002ee4:	2000005c 	.word	0x2000005c

08002ee8 <sbrk_aligned>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4e0e      	ldr	r6, [pc, #56]	; (8002f24 <sbrk_aligned+0x3c>)
 8002eec:	460c      	mov	r4, r1
 8002eee:	6831      	ldr	r1, [r6, #0]
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	b911      	cbnz	r1, 8002efa <sbrk_aligned+0x12>
 8002ef4:	f000 f8ac 	bl	8003050 <_sbrk_r>
 8002ef8:	6030      	str	r0, [r6, #0]
 8002efa:	4621      	mov	r1, r4
 8002efc:	4628      	mov	r0, r5
 8002efe:	f000 f8a7 	bl	8003050 <_sbrk_r>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d00a      	beq.n	8002f1c <sbrk_aligned+0x34>
 8002f06:	1cc4      	adds	r4, r0, #3
 8002f08:	f024 0403 	bic.w	r4, r4, #3
 8002f0c:	42a0      	cmp	r0, r4
 8002f0e:	d007      	beq.n	8002f20 <sbrk_aligned+0x38>
 8002f10:	1a21      	subs	r1, r4, r0
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 f89c 	bl	8003050 <_sbrk_r>
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d101      	bne.n	8002f20 <sbrk_aligned+0x38>
 8002f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f20:	4620      	mov	r0, r4
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	20000748 	.word	0x20000748

08002f28 <_malloc_r>:
 8002f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f2c:	1ccd      	adds	r5, r1, #3
 8002f2e:	f025 0503 	bic.w	r5, r5, #3
 8002f32:	3508      	adds	r5, #8
 8002f34:	2d0c      	cmp	r5, #12
 8002f36:	bf38      	it	cc
 8002f38:	250c      	movcc	r5, #12
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	db01      	blt.n	8002f44 <_malloc_r+0x1c>
 8002f40:	42a9      	cmp	r1, r5
 8002f42:	d905      	bls.n	8002f50 <_malloc_r+0x28>
 8002f44:	230c      	movs	r3, #12
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	2600      	movs	r6, #0
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003024 <_malloc_r+0xfc>
 8002f54:	f000 f868 	bl	8003028 <__malloc_lock>
 8002f58:	f8d8 3000 	ldr.w	r3, [r8]
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	bb5c      	cbnz	r4, 8002fb8 <_malloc_r+0x90>
 8002f60:	4629      	mov	r1, r5
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff ffc0 	bl	8002ee8 <sbrk_aligned>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	d155      	bne.n	800301a <_malloc_r+0xf2>
 8002f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8002f72:	4626      	mov	r6, r4
 8002f74:	2e00      	cmp	r6, #0
 8002f76:	d145      	bne.n	8003004 <_malloc_r+0xdc>
 8002f78:	2c00      	cmp	r4, #0
 8002f7a:	d048      	beq.n	800300e <_malloc_r+0xe6>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	4631      	mov	r1, r6
 8002f80:	4638      	mov	r0, r7
 8002f82:	eb04 0903 	add.w	r9, r4, r3
 8002f86:	f000 f863 	bl	8003050 <_sbrk_r>
 8002f8a:	4581      	cmp	r9, r0
 8002f8c:	d13f      	bne.n	800300e <_malloc_r+0xe6>
 8002f8e:	6821      	ldr	r1, [r4, #0]
 8002f90:	1a6d      	subs	r5, r5, r1
 8002f92:	4629      	mov	r1, r5
 8002f94:	4638      	mov	r0, r7
 8002f96:	f7ff ffa7 	bl	8002ee8 <sbrk_aligned>
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d037      	beq.n	800300e <_malloc_r+0xe6>
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	442b      	add	r3, r5
 8002fa2:	6023      	str	r3, [r4, #0]
 8002fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d038      	beq.n	800301e <_malloc_r+0xf6>
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	42a2      	cmp	r2, r4
 8002fb0:	d12b      	bne.n	800300a <_malloc_r+0xe2>
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	e00f      	b.n	8002fd8 <_malloc_r+0xb0>
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	1b52      	subs	r2, r2, r5
 8002fbc:	d41f      	bmi.n	8002ffe <_malloc_r+0xd6>
 8002fbe:	2a0b      	cmp	r2, #11
 8002fc0:	d917      	bls.n	8002ff2 <_malloc_r+0xca>
 8002fc2:	1961      	adds	r1, r4, r5
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	6025      	str	r5, [r4, #0]
 8002fc8:	bf18      	it	ne
 8002fca:	6059      	strne	r1, [r3, #4]
 8002fcc:	6863      	ldr	r3, [r4, #4]
 8002fce:	bf08      	it	eq
 8002fd0:	f8c8 1000 	streq.w	r1, [r8]
 8002fd4:	5162      	str	r2, [r4, r5]
 8002fd6:	604b      	str	r3, [r1, #4]
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f104 060b 	add.w	r6, r4, #11
 8002fde:	f000 f829 	bl	8003034 <__malloc_unlock>
 8002fe2:	f026 0607 	bic.w	r6, r6, #7
 8002fe6:	1d23      	adds	r3, r4, #4
 8002fe8:	1af2      	subs	r2, r6, r3
 8002fea:	d0ae      	beq.n	8002f4a <_malloc_r+0x22>
 8002fec:	1b9b      	subs	r3, r3, r6
 8002fee:	50a3      	str	r3, [r4, r2]
 8002ff0:	e7ab      	b.n	8002f4a <_malloc_r+0x22>
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	6862      	ldr	r2, [r4, #4]
 8002ff6:	d1dd      	bne.n	8002fb4 <_malloc_r+0x8c>
 8002ff8:	f8c8 2000 	str.w	r2, [r8]
 8002ffc:	e7ec      	b.n	8002fd8 <_malloc_r+0xb0>
 8002ffe:	4623      	mov	r3, r4
 8003000:	6864      	ldr	r4, [r4, #4]
 8003002:	e7ac      	b.n	8002f5e <_malloc_r+0x36>
 8003004:	4634      	mov	r4, r6
 8003006:	6876      	ldr	r6, [r6, #4]
 8003008:	e7b4      	b.n	8002f74 <_malloc_r+0x4c>
 800300a:	4613      	mov	r3, r2
 800300c:	e7cc      	b.n	8002fa8 <_malloc_r+0x80>
 800300e:	230c      	movs	r3, #12
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4638      	mov	r0, r7
 8003014:	f000 f80e 	bl	8003034 <__malloc_unlock>
 8003018:	e797      	b.n	8002f4a <_malloc_r+0x22>
 800301a:	6025      	str	r5, [r4, #0]
 800301c:	e7dc      	b.n	8002fd8 <_malloc_r+0xb0>
 800301e:	605b      	str	r3, [r3, #4]
 8003020:	deff      	udf	#255	; 0xff
 8003022:	bf00      	nop
 8003024:	20000744 	.word	0x20000744

08003028 <__malloc_lock>:
 8003028:	4801      	ldr	r0, [pc, #4]	; (8003030 <__malloc_lock+0x8>)
 800302a:	f000 b84b 	b.w	80030c4 <__retarget_lock_acquire_recursive>
 800302e:	bf00      	nop
 8003030:	20000888 	.word	0x20000888

08003034 <__malloc_unlock>:
 8003034:	4801      	ldr	r0, [pc, #4]	; (800303c <__malloc_unlock+0x8>)
 8003036:	f000 b846 	b.w	80030c6 <__retarget_lock_release_recursive>
 800303a:	bf00      	nop
 800303c:	20000888 	.word	0x20000888

08003040 <memset>:
 8003040:	4402      	add	r2, r0
 8003042:	4603      	mov	r3, r0
 8003044:	4293      	cmp	r3, r2
 8003046:	d100      	bne.n	800304a <memset+0xa>
 8003048:	4770      	bx	lr
 800304a:	f803 1b01 	strb.w	r1, [r3], #1
 800304e:	e7f9      	b.n	8003044 <memset+0x4>

08003050 <_sbrk_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4d06      	ldr	r5, [pc, #24]	; (800306c <_sbrk_r+0x1c>)
 8003054:	2300      	movs	r3, #0
 8003056:	4604      	mov	r4, r0
 8003058:	4608      	mov	r0, r1
 800305a:	602b      	str	r3, [r5, #0]
 800305c:	f7fd fcb6 	bl	80009cc <_sbrk>
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d102      	bne.n	800306a <_sbrk_r+0x1a>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	b103      	cbz	r3, 800306a <_sbrk_r+0x1a>
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	bd38      	pop	{r3, r4, r5, pc}
 800306c:	20000884 	.word	0x20000884

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	2000005c 	.word	0x2000005c

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4d0d      	ldr	r5, [pc, #52]	; (80030b4 <__libc_init_array+0x38>)
 8003080:	4c0d      	ldr	r4, [pc, #52]	; (80030b8 <__libc_init_array+0x3c>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	2600      	movs	r6, #0
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	4d0b      	ldr	r5, [pc, #44]	; (80030bc <__libc_init_array+0x40>)
 800308e:	4c0c      	ldr	r4, [pc, #48]	; (80030c0 <__libc_init_array+0x44>)
 8003090:	f000 f81a 	bl	80030c8 <_init>
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	2600      	movs	r6, #0
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	08003100 	.word	0x08003100
 80030b8:	08003100 	.word	0x08003100
 80030bc:	08003100 	.word	0x08003100
 80030c0:	08003104 	.word	0x08003104

080030c4 <__retarget_lock_acquire_recursive>:
 80030c4:	4770      	bx	lr

080030c6 <__retarget_lock_release_recursive>:
 80030c6:	4770      	bx	lr

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
