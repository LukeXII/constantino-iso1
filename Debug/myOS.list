
myOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002898  08002898  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028a0  080028a0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080028a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000844  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b7c6  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e38  00000000  00000000  0002b895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ad0  00000000  00000000  0002d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000843  00000000  00000000  0002e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024c8e  00000000  00000000  0002e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c82d  00000000  00000000  00053671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e04e2  00000000  00000000  0005fe9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ed8  00000000  00000000  00140380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00143258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002868 	.word	0x08002868

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000060 	.word	0x20000060
 80001e8:	08002868 	.word	0x08002868

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fb40 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f858 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8c0 	bl	8000678 <MX_GPIO_Init>
//  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */

  osTaskCreate(&task1, TASK_PRIORITY_3, osTask1);
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <main+0x48>)
 80004fa:	2103      	movs	r1, #3
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x4c>)
 80004fe:	f001 fe13 	bl	8002128 <osTaskCreate>
  osTaskCreate(&task2, TASK_PRIORITY_3, osTask2);
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <main+0x50>)
 8000504:	2103      	movs	r1, #3
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x54>)
 8000508:	f001 fe0e 	bl	8002128 <osTaskCreate>
  osTaskCreate(&task3, TASK_PRIORITY_1, osTask3);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x58>)
 800050e:	2101      	movs	r1, #1
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x5c>)
 8000512:	f001 fe09 	bl	8002128 <osTaskCreate>
  osTaskCreate(&task4, TASK_PRIORITY_1, osTask4);
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <main+0x60>)
 8000518:	2101      	movs	r1, #1
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x64>)
 800051c:	f001 fe04 	bl	8002128 <osTaskCreate>
//  osTaskCreate(&task5, TASK_PRIORITY_1, osTask5);
//  osTaskCreate(&task6, TASK_PRIORITY_2, osTask6);

  osQueueInit(&testQueue, sizeof(uint8_t));
 8000520:	2101      	movs	r1, #1
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x68>)
 8000524:	f002 f87a 	bl	800261c <osQueueInit>

  osStart();
 8000528:	f001 fe62 	bl	80021f0 <osStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	__WFI();
 800052c:	bf30      	wfi
 800052e:	e7fd      	b.n	800052c <main+0x44>
 8000530:	08000555 	.word	0x08000555
 8000534:	20000078 	.word	0x20000078
 8000538:	08000567 	.word	0x08000567
 800053c:	200001b4 	.word	0x200001b4
 8000540:	0800057f 	.word	0x0800057f
 8000544:	200002f0 	.word	0x200002f0
 8000548:	08000591 	.word	0x08000591
 800054c:	2000042c 	.word	0x2000042c
 8000550:	20000568 	.word	0x20000568

08000554 <osTask1>:
  }
  /* USER CODE END 3 */
}

void osTask1(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
  uint32_t i = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  while(1)
  {
    i++;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3301      	adds	r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	e7fb      	b.n	800055e <osTask1+0xa>

08000566 <osTask2>:
  }
}


void osTask2(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
  uint32_t j = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  while(1)
  {
    j++;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
    osDelay(3);
 8000576:	2003      	movs	r0, #3
 8000578:	f001 fec6 	bl	8002308 <osDelay>
    j++;
 800057c:	e7f8      	b.n	8000570 <osTask2+0xa>

0800057e <osTask3>:
  }
}

void osTask3(void)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
  uint32_t k = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
  while(1)
  {
    k++;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e7fb      	b.n	8000588 <osTask3+0xa>

08000590 <osTask4>:
  }
}

void osTask4(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
  uint32_t k = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
  while(1)
  {
    k++;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	e7fb      	b.n	800059a <osTask4+0xa>
	...

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f914 	bl	80027e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd8b 	bl	8001144 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f8e0 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ffec 	bl	8001634 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f8c9 	bl	80007f8 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b4c      	ldr	r3, [pc, #304]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a4b      	ldr	r2, [pc, #300]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b49      	ldr	r3, [pc, #292]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	4b45      	ldr	r3, [pc, #276]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a44      	ldr	r2, [pc, #272]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b42      	ldr	r3, [pc, #264]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a3d      	ldr	r2, [pc, #244]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a36      	ldr	r2, [pc, #216]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_GPIO_Init+0x14c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a2f      	ldr	r2, [pc, #188]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <MX_GPIO_Init+0x14c>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0x14c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f244 0181 	movw	r1, #16513	; 0x4081
 800073c:	4822      	ldr	r0, [pc, #136]	; (80007c8 <MX_GPIO_Init+0x150>)
 800073e:	f000 fce7 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4821      	ldr	r0, [pc, #132]	; (80007cc <MX_GPIO_Init+0x154>)
 8000748:	f000 fce2 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000752:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <MX_GPIO_Init+0x158>)
 8000764:	f000 fb28 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000768:	f244 0381 	movw	r3, #16513	; 0x4081
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0x150>)
 8000782:	f000 fb19 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000786:	2340      	movs	r3, #64	; 0x40
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <MX_GPIO_Init+0x154>)
 800079e:	f000 fb0b 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_GPIO_Init+0x154>)
 80007b6:	f000 faff 	bl	8000db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	; 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40021800 	.word	0x40021800
 80007d0:	40020800 	.word	0x40020800

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 f9e5 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010000 	.word	0x40010000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <HAL_MspInit+0x4c>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <HAL_InitTick+0xd4>)
 800086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086c:	4a2e      	ldr	r2, [pc, #184]	; (8000928 <HAL_InitTick+0xd4>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6453      	str	r3, [r2, #68]	; 0x44
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <HAL_InitTick+0xd4>)
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000880:	f107 020c 	add.w	r2, r7, #12
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f001 f8de 	bl	8001a4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000890:	f001 f8c8 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8000894:	4603      	mov	r3, r0
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	4a23      	ldr	r2, [pc, #140]	; (800092c <HAL_InitTick+0xd8>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	0c9b      	lsrs	r3, r3, #18
 80008a4:	3b01      	subs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <HAL_InitTick+0xdc>)
 80008aa:	4a22      	ldr	r2, [pc, #136]	; (8000934 <HAL_InitTick+0xe0>)
 80008ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <HAL_InitTick+0xdc>)
 80008b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <HAL_InitTick+0xdc>)
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_InitTick+0xdc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_InitTick+0xdc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_InitTick+0xdc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <HAL_InitTick+0xdc>)
 80008d0:	f001 f8ee 	bl	8001ab0 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d11b      	bne.n	800091a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <HAL_InitTick+0xdc>)
 80008e4:	f001 f93e 	bl	8001b64 <HAL_TIM_Base_Start_IT>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d111      	bne.n	800091a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008f6:	2019      	movs	r0, #25
 80008f8:	f000 fa50 	bl	8000d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d808      	bhi.n	8000914 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000902:	2200      	movs	r2, #0
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	2019      	movs	r0, #25
 8000908:	f000 fa2c 	bl	8000d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_InitTick+0xe4>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e002      	b.n	800091a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800091e:	4618      	mov	r0, r3
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	431bde83 	.word	0x431bde83
 8000930:	20000578 	.word	0x20000578
 8000934:	40010000 	.word	0x40010000
 8000938:	20000004 	.word	0x20000004

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800097e:	f001 f961 	bl	8001c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000578 	.word	0x20000578

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f001 ff28 	bl	8002810 <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20030000 	.word	0x20030000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200005c0 	.word	0x200005c0
 80009f4:	200008a0 	.word	0x200008a0

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	2302      	movs	r3, #2
 8000a34:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	d011      	beq.n	8000a6a <SystemCoreClockUpdate+0x4e>
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d844      	bhi.n	8000ad6 <SystemCoreClockUpdate+0xba>
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <SystemCoreClockUpdate+0x3e>
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d004      	beq.n	8000a62 <SystemCoreClockUpdate+0x46>
 8000a58:	e03d      	b.n	8000ad6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <SystemCoreClockUpdate+0xf0>)
 8000a5c:	4a2c      	ldr	r2, [pc, #176]	; (8000b10 <SystemCoreClockUpdate+0xf4>)
 8000a5e:	601a      	str	r2, [r3, #0]
      break;
 8000a60:	e03d      	b.n	8000ade <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <SystemCoreClockUpdate+0xf0>)
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <SystemCoreClockUpdate+0xf8>)
 8000a66:	601a      	str	r2, [r3, #0]
      break;
 8000a68:	e039      	b.n	8000ade <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	0d9b      	lsrs	r3, r3, #22
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a7e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00c      	beq.n	8000aa0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <SystemCoreClockUpdate+0xf8>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000a90:	6852      	ldr	r2, [r2, #4]
 8000a92:	0992      	lsrs	r2, r2, #6
 8000a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a98:	fb02 f303 	mul.w	r3, r2, r3
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e00b      	b.n	8000ab8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <SystemCoreClockUpdate+0xf4>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000aaa:	6852      	ldr	r2, [r2, #4]
 8000aac:	0992      	lsrs	r2, r2, #6
 8000aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	0c1b      	lsrs	r3, r3, #16
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <SystemCoreClockUpdate+0xf0>)
 8000ad2:	6013      	str	r3, [r2, #0]
      break;
 8000ad4:	e003      	b.n	8000ade <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <SystemCoreClockUpdate+0xf0>)
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <SystemCoreClockUpdate+0xf4>)
 8000ada:	601a      	str	r2, [r3, #0]
      break;
 8000adc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <SystemCoreClockUpdate+0xec>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <SystemCoreClockUpdate+0xfc>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SystemCoreClockUpdate+0xf0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <SystemCoreClockUpdate+0xf0>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	00f42400 	.word	0x00f42400
 8000b14:	007a1200 	.word	0x007a1200
 8000b18:	08002880 	.word	0x08002880

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ff57 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f001 fe67 	bl	800281c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fccb 	bl	80004e8 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b60:	080028a8 	.word	0x080028a8
  ldr r2, =_sbss
 8000b64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b68:	200008a0 	.word	0x200008a0

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8d8 	bl	8000d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f7ff fe58 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe2e 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200005c4 	.word	0x200005c4

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200005c4 	.word	0x200005c4

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff4c 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6978      	ldr	r0, [r7, #20]
 8000d82:	f7ff ffb1 	bl	8000ce8 <NVIC_EncodePriority>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff80 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff54 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e177      	b.n	80010c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8166 	bne.w	80010be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80c0 	beq.w	80010be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b66      	ldr	r3, [pc, #408]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a65      	ldr	r2, [pc, #404]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b63      	ldr	r3, [pc, #396]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a61      	ldr	r2, [pc, #388]	; (80010e0 <HAL_GPIO_Init+0x328>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_GPIO_Init+0x32c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d037      	beq.n	8000ff6 <HAL_GPIO_Init+0x23e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d031      	beq.n	8000ff2 <HAL_GPIO_Init+0x23a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a56      	ldr	r2, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x334>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d02b      	beq.n	8000fee <HAL_GPIO_Init+0x236>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a55      	ldr	r2, [pc, #340]	; (80010f0 <HAL_GPIO_Init+0x338>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d025      	beq.n	8000fea <HAL_GPIO_Init+0x232>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a54      	ldr	r2, [pc, #336]	; (80010f4 <HAL_GPIO_Init+0x33c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01f      	beq.n	8000fe6 <HAL_GPIO_Init+0x22e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a53      	ldr	r2, [pc, #332]	; (80010f8 <HAL_GPIO_Init+0x340>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x22a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_GPIO_Init+0x344>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x226>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <HAL_GPIO_Init+0x348>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x222>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_GPIO_Init+0x34c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <HAL_GPIO_Init+0x350>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x21a>
 8000fce:	2309      	movs	r3, #9
 8000fd0:	e012      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	e010      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	e00e      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_GPIO_Init+0x328>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_GPIO_Init+0x354>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a34      	ldr	r2, [pc, #208]	; (800110c <HAL_GPIO_Init+0x354>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_GPIO_Init+0x354>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a29      	ldr	r2, [pc, #164]	; (800110c <HAL_GPIO_Init+0x354>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_GPIO_Init+0x354>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <HAL_GPIO_Init+0x354>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_GPIO_Init+0x354>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_GPIO_Init+0x354>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f ae84 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40022000 	.word	0x40022000
 8001108:	40022400 	.word	0x40022400
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e267      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d075      	beq.n	800124e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b04      	cmp	r3, #4
 800116c:	d00c      	beq.n	8001188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116e:	4b85      	ldr	r3, [pc, #532]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	2b08      	cmp	r3, #8
 8001178:	d112      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001186:	d10b      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d05b      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d157      	bne.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e242      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d106      	bne.n	80011b8 <HAL_RCC_OscConfig+0x74>
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e01d      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x98>
 80011c2:	4b70      	ldr	r3, [pc, #448]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6f      	ldr	r2, [pc, #444]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e00b      	b.n	80011f4 <HAL_RCC_OscConfig+0xb0>
 80011dc:	4b69      	ldr	r3, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a68      	ldr	r2, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b66      	ldr	r3, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a65      	ldr	r2, [pc, #404]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d013      	beq.n	8001224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fcee 	bl	8000bdc <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fcea 	bl	8000bdc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e207      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0xc0>
 8001222:	e014      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fcda 	bl	8000bdc <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fcd6 	bl	8000bdc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e1f3      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	4b51      	ldr	r3, [pc, #324]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d063      	beq.n	8001322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125a:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00b      	beq.n	800127e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001266:	4b47      	ldr	r3, [pc, #284]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d11c      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d116      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	4b41      	ldr	r3, [pc, #260]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_RCC_OscConfig+0x152>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e1c7      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4937      	ldr	r1, [pc, #220]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	e03a      	b.n	8001322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b4:	4b34      	ldr	r3, [pc, #208]	; (8001388 <HAL_RCC_OscConfig+0x244>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fc8f 	bl	8000bdc <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fc8b 	bl	8000bdc <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1a8      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4925      	ldr	r1, [pc, #148]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e015      	b.n	8001322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x244>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc6e 	bl	8000bdc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001304:	f7ff fc6a 	bl	8000bdc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e187      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d036      	beq.n	800139c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_RCC_OscConfig+0x248>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133c:	f7ff fc4e 	bl	8000bdc <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fc4a 	bl	8000bdc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e167      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x240>)
 8001358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x200>
 8001362:	e01b      	b.n	800139c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_OscConfig+0x248>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fc37 	bl	8000bdc <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	e00e      	b.n	8001390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fc33 	bl	8000bdc <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d907      	bls.n	8001390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e150      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
 8001384:	40023800 	.word	0x40023800
 8001388:	42470000 	.word	0x42470000
 800138c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ea      	bne.n	8001372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8097 	beq.w	80014d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b7d      	ldr	r3, [pc, #500]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a7c      	ldr	r2, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a73      	ldr	r2, [pc, #460]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fbf3 	bl	8000bdc <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fbef 	bl	8000bdc <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e10c      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x2ea>
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a63      	ldr	r2, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	e01c      	b.n	8001468 <HAL_RCC_OscConfig+0x324>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b05      	cmp	r3, #5
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x30c>
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a5b      	ldr	r2, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0x324>
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a57      	ldr	r2, [pc, #348]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d015      	beq.n	800149c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fbb4 	bl	8000bdc <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fbb0 	bl	8000bdc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0cb      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0ee      	beq.n	8001478 <HAL_RCC_OscConfig+0x334>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fb9e 	bl	8000bdc <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb9a 	bl	8000bdc <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0b5      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ee      	bne.n	80014a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a38      	ldr	r2, [pc, #224]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a1 	beq.w	8001624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d05c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d141      	bne.n	800157a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb6e 	bl	8000bdc <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb6a 	bl	8000bdc <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e087      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69da      	ldr	r2, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	3b01      	subs	r3, #1
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	061b      	lsls	r3, r3, #24
 8001546:	491b      	ldr	r1, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fb43 	bl	8000bdc <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb3f 	bl	8000bdc <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e05c      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x416>
 8001578:	e054      	b.n	8001624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fb2c 	bl	8000bdc <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fb28 	bl	8000bdc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e045      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x444>
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e038      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000
 80015bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x4ec>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d028      	beq.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d121      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d111      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0cc      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b68      	ldr	r3, [pc, #416]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d90c      	bls.n	8001670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b65      	ldr	r3, [pc, #404]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d044      	beq.n	8001754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e06f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e067      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4934      	ldr	r1, [pc, #208]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001724:	f7ff fa5a 	bl	8000bdc <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff fa56 	bl	8000bdc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d20c      	bcs.n	800177c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	; (80017f4 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f83a 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023c00 	.word	0x40023c00
 80017f0:	40023800 	.word	0x40023800
 80017f4:	08002880 	.word	0x08002880
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001804:	b094      	sub	sp, #80	; 0x50
 8001806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	; 0x44
 800180c:	2300      	movs	r3, #0
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001810:	2300      	movs	r3, #0
 8001812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001818:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d00d      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x40>
 8001824:	2b08      	cmp	r3, #8
 8001826:	f200 80e1 	bhi.w	80019ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x34>
 800182e:	2b04      	cmp	r3, #4
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x3a>
 8001832:	e0db      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001838:	e0db      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183a:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x208>)
 800183c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800183e:	e0d8      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001840:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001848:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001856:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	099b      	lsrs	r3, r3, #6
 800185c:	2200      	movs	r2, #0
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001860:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
 800186e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001872:	4622      	mov	r2, r4
 8001874:	462b      	mov	r3, r5
 8001876:	f04f 0000 	mov.w	r0, #0
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	0159      	lsls	r1, r3, #5
 8001880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001884:	0150      	lsls	r0, r2, #5
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4621      	mov	r1, r4
 800188c:	1a51      	subs	r1, r2, r1
 800188e:	6139      	str	r1, [r7, #16]
 8001890:	4629      	mov	r1, r5
 8001892:	eb63 0301 	sbc.w	r3, r3, r1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018a4:	4659      	mov	r1, fp
 80018a6:	018b      	lsls	r3, r1, #6
 80018a8:	4651      	mov	r1, sl
 80018aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ae:	4651      	mov	r1, sl
 80018b0:	018a      	lsls	r2, r1, #6
 80018b2:	4651      	mov	r1, sl
 80018b4:	ebb2 0801 	subs.w	r8, r2, r1
 80018b8:	4659      	mov	r1, fp
 80018ba:	eb63 0901 	sbc.w	r9, r3, r1
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d2:	4690      	mov	r8, r2
 80018d4:	4699      	mov	r9, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	eb18 0303 	adds.w	r3, r8, r3
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	462b      	mov	r3, r5
 80018e0:	eb49 0303 	adc.w	r3, r9, r3
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018f2:	4629      	mov	r1, r5
 80018f4:	024b      	lsls	r3, r1, #9
 80018f6:	4621      	mov	r1, r4
 80018f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018fc:	4621      	mov	r1, r4
 80018fe:	024a      	lsls	r2, r1, #9
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001906:	2200      	movs	r2, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
 800190a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800190c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001910:	f7fe fc6c 	bl	80001ec <__aeabi_uldivmod>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4613      	mov	r3, r2
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191c:	e058      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	2200      	movs	r2, #0
 8001926:	4618      	mov	r0, r3
 8001928:	4611      	mov	r1, r2
 800192a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800192e:	623b      	str	r3, [r7, #32]
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001938:	4642      	mov	r2, r8
 800193a:	464b      	mov	r3, r9
 800193c:	f04f 0000 	mov.w	r0, #0
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	0159      	lsls	r1, r3, #5
 8001946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194a:	0150      	lsls	r0, r2, #5
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4641      	mov	r1, r8
 8001952:	ebb2 0a01 	subs.w	sl, r2, r1
 8001956:	4649      	mov	r1, r9
 8001958:	eb63 0b01 	sbc.w	fp, r3, r1
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800196c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001970:	ebb2 040a 	subs.w	r4, r2, sl
 8001974:	eb63 050b 	sbc.w	r5, r3, fp
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	00eb      	lsls	r3, r5, #3
 8001982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001986:	00e2      	lsls	r2, r4, #3
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	4643      	mov	r3, r8
 800198e:	18e3      	adds	r3, r4, r3
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	464b      	mov	r3, r9
 8001994:	eb45 0303 	adc.w	r3, r5, r3
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019a6:	4629      	mov	r1, r5
 80019a8:	028b      	lsls	r3, r1, #10
 80019aa:	4621      	mov	r1, r4
 80019ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b0:	4621      	mov	r1, r4
 80019b2:	028a      	lsls	r2, r1, #10
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ba:	2200      	movs	r2, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	61fa      	str	r2, [r7, #28]
 80019c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019c4:	f7fe fc12 	bl	80001ec <__aeabi_uldivmod>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4613      	mov	r3, r2
 80019ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	3301      	adds	r3, #1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ea:	e002      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3750      	adds	r7, #80	; 0x50
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200

08001a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000

08001a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a28:	f7ff fff0 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	0b5b      	lsrs	r3, r3, #13
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	4903      	ldr	r1, [pc, #12]	; (8001a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08002890 	.word	0x08002890

08001a4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	220f      	movs	r2, #15
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_RCC_GetClockConfig+0x60>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 020f 	and.w	r2, r3, #15
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	601a      	str	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f839 	bl	8001b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 f9d8 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d001      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e04e      	b.n	8001c1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d022      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba6:	d01d      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d013      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x80>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d010      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	e007      	b.n	8001c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40010400 	.word	0x40010400
 8001c3c:	40014000 	.word	0x40014000
 8001c40:	40001800 	.word	0x40001800

08001c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d122      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d11b      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0202 	mvn.w	r2, #2
 8001c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ee 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8e0 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8f1 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0204 	mvn.w	r2, #4
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8c4 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8b6 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8c7 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0208 	mvn.w	r2, #8
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f89a 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f88c 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f89d 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f870 	bl	8001e68 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f862 	bl	8001e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f873 	bl	8001e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0201 	mvn.w	r2, #1
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fd06 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f902 	bl	8001ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f838 	bl	8001e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0220 	mvn.w	r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8cc 	bl	8001fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <TIM_Base_SetConfig+0x118>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <TIM_Base_SetConfig+0x11c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <TIM_Base_SetConfig+0x120>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <TIM_Base_SetConfig+0x124>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a2f      	ldr	r2, [pc, #188]	; (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f04:	d027      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <TIM_Base_SetConfig+0x118>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d023      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <TIM_Base_SetConfig+0x11c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <TIM_Base_SetConfig+0x120>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <TIM_Base_SetConfig+0x124>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d017      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <TIM_Base_SetConfig+0x128>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <TIM_Base_SetConfig+0x12c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <TIM_Base_SetConfig+0x130>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <TIM_Base_SetConfig+0x134>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <TIM_Base_SetConfig+0x138>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <TIM_Base_SetConfig+0x13c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <TIM_Base_SetConfig+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0xf8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <TIM_Base_SetConfig+0x124>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d103      	bne.n	8001fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40010400 	.word	0x40010400
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	40014400 	.word	0x40014400
 8001fd4:	40014800 	.word	0x40014800
 8001fd8:	40001800 	.word	0x40001800
 8001fdc:	40001c00 	.word	0x40001c00
 8001fe0:	40002000 	.word	0x40002000

08001fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <__NVIC_EnableIRQ>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	; (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_DisableIRQ>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db12      	blt.n	8002080 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	490a      	ldr	r1, [pc, #40]	; (800208c <__NVIC_DisableIRQ+0x44>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	3320      	adds	r3, #32
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002074:	f3bf 8f4f 	dsb	sy
}
 8002078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800207a:	f3bf 8f6f 	isb	sy
}
 800207e:	bf00      	nop
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ffc2 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <osTaskCreate>:
static void scheduler(void);

/* ================ Public functions implementation ================ */

osError_t osTaskCreate(osTaskObject_t * ptrTaskHandler, osTaskPriority_t taskPriority, void * ptrTaskCallback)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	460b      	mov	r3, r1
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	72fb      	strb	r3, [r7, #11]

    // Check that arguments are not NULL
    if ( (ptrTaskHandler == NULL) || (ptrTaskCallback == NULL) )
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <osTaskCreate+0x1a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <osTaskCreate+0x1e>
    {
    	return OS_ERR_INVALID_PTR;
 8002142:	2302      	movs	r3, #2
 8002144:	e04b      	b.n	80021de <osTaskCreate+0xb6>
    }

    // Check if there's available tasks to allocate
    if (osCore.tasksCounter >= OS_MAX_TASKS)
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <osTaskCreate+0xc4>)
 8002148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800214c:	2b07      	cmp	r3, #7
 800214e:	d901      	bls.n	8002154 <osTaskCreate+0x2c>
    {
        return OS_ERR_MAX_TASKS;
 8002150:	2301      	movs	r3, #1
 8002152:	e044      	b.n	80021de <osTaskCreate+0xb6>
        Arrange the STACK Frame for the first time:
        1) Set bit 24 of xPSR to make sure we are executing THUMB instructions
        2) PC must contain the task entry point (ptrTaskCallback)
        3) Set the link register to EXEC_RETURN_VALUE to trigger
    */
    ptrTaskHandler->taskStack[OS_MAX_STACK_SIZE/4 - XPSR_REG_POSITION]      = XPSR_VALUE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800215a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    ptrTaskHandler->taskStack[OS_MAX_STACK_SIZE/4 - PC_REG_POSITION]        = (uint32_t)ptrTaskCallback;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    ptrTaskHandler->taskStack[OS_MAX_STACK_SIZE/4 - LR_PREV_VALUE_POSITION] = EXEC_RETURN_VALUE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f06f 0206 	mvn.w	r2, #6
 800216c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc


    ptrTaskHandler->taskStackPointer = (uint32_t)(ptrTaskHandler->taskStack + OS_MAX_STACK_SIZE/4 - OS_STACK_FRAME_SIZE);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	33bc      	adds	r3, #188	; 0xbc
 8002174:	461a      	mov	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ptrTaskHandler->ptrTaskEntryPoint = ptrTaskCallback;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ptrTaskHandler->taskExecStatus = OS_TASK_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    osCore.tasksCounter++;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <osTaskCreate+0xc4>)
 800218e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002192:	3301      	adds	r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <osTaskCreate+0xc4>)
 8002198:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ptrTaskHandler->taskID = osCore.tasksCounter;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <osTaskCreate+0xc4>)
 800219e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    ptrTaskHandler->taskPriority = taskPriority;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	7afa      	ldrb	r2, [r7, #11]
 80021ac:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

    // Fill controls OS structure
    osCore.ptrTaskList[osCore.tasksCounter - 1] = ptrTaskHandler;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <osTaskCreate+0xc4>)
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b6:	3b01      	subs	r3, #1
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <osTaskCreate+0xc4>)
 80021ba:	3304      	adds	r3, #4
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (osCore.tasksCounter < OS_MAX_TASKS)
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <osTaskCreate+0xc4>)
 80021c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	d807      	bhi.n	80021dc <osTaskCreate+0xb4>
	{
    	osCore.ptrTaskList[osCore.tasksCounter] = NULL;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <osTaskCreate+0xc4>)
 80021ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021d2:	4a06      	ldr	r2, [pc, #24]	; (80021ec <osTaskCreate+0xc4>)
 80021d4:	3304      	adds	r3, #4
 80021d6:	2100      	movs	r1, #0
 80021d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

    return OS_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	200005c8 	.word	0x200005c8

080021f0 <osStart>:


void osStart(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
	uint8_t i, row, col;

	// Disable Systick and PendSV interrupts
    NVIC_DisableIRQ(SysTick_IRQn);
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295
 80021fa:	f7ff ff25 	bl	8002048 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(PendSV_IRQn);
 80021fe:	f06f 0001 	mvn.w	r0, #1
 8002202:	f7ff ff21 	bl	8002048 <__NVIC_DisableIRQ>

    osCore.execStatus = OS_STATUS_RESET;		// Set the system to RESET for the first time
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <osStart+0x104>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
    osCore.ptrCurrTask = NULL;      			// Set the current task to NULL the first time
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <osStart+0x104>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
    osCore.ptrNextTask = NULL;      			// Set the next task to NULL the first time
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <osStart+0x104>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]

    osTaskCreate(&idleTask, TASK_PRIORITY_3, osIdleTask);
 8002218:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <osStart+0x108>)
 800221a:	2103      	movs	r1, #3
 800221c:	4837      	ldr	r0, [pc, #220]	; (80022fc <osStart+0x10c>)
 800221e:	f7ff ff83 	bl	8002128 <osTaskCreate>

    for(i = 0; i < osCore.tasksCounter;i++)
 8002222:	2300      	movs	r3, #0
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	e042      	b.n	80022ae <osStart+0xbe>
    {
    	switch(osCore.ptrTaskList[i]->taskPriority)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <osStart+0x104>)
 800222c:	3304      	adds	r3, #4
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8002236:	2b03      	cmp	r3, #3
 8002238:	d816      	bhi.n	8002268 <osStart+0x78>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <osStart+0x50>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	08002251 	.word	0x08002251
 8002244:	08002257 	.word	0x08002257
 8002248:	0800225d 	.word	0x0800225d
 800224c:	08002263 	.word	0x08002263
    	{
    	case TASK_PRIORITY_0:

    		row = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	71bb      	strb	r3, [r7, #6]
    		break;
 8002254:	e008      	b.n	8002268 <osStart+0x78>

    	case TASK_PRIORITY_1:

    		row = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	71bb      	strb	r3, [r7, #6]
    		break;
 800225a:	e005      	b.n	8002268 <osStart+0x78>

    	case TASK_PRIORITY_2:

    		row = 2;
 800225c:	2302      	movs	r3, #2
 800225e:	71bb      	strb	r3, [r7, #6]
    		break;
 8002260:	e002      	b.n	8002268 <osStart+0x78>

    	case TASK_PRIORITY_3:

    		row = 3;
 8002262:	2303      	movs	r3, #3
 8002264:	71bb      	strb	r3, [r7, #6]
    		break;
 8002266:	bf00      	nop
    	}

    	col = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	717b      	strb	r3, [r7, #5]
    	while(osCore.taskPriorityTable[row][col] != 0)
 800226c:	e002      	b.n	8002274 <osStart+0x84>
    		col++;
 800226e:	797b      	ldrb	r3, [r7, #5]
 8002270:	3301      	adds	r3, #1
 8002272:	717b      	strb	r3, [r7, #5]
    	while(osCore.taskPriorityTable[row][col] != 0)
 8002274:	79ba      	ldrb	r2, [r7, #6]
 8002276:	797b      	ldrb	r3, [r7, #5]
 8002278:	491e      	ldr	r1, [pc, #120]	; (80022f4 <osStart+0x104>)
 800227a:	00d2      	lsls	r2, r2, #3
 800227c:	440a      	add	r2, r1
 800227e:	4413      	add	r3, r2
 8002280:	3331      	adds	r3, #49	; 0x31
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f2      	bne.n	800226e <osStart+0x7e>

    	osCore.taskPriorityTable[row][col] = osCore.ptrTaskList[i]->taskID;
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <osStart+0x104>)
 800228c:	3304      	adds	r3, #4
 800228e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002292:	79ba      	ldrb	r2, [r7, #6]
 8002294:	797b      	ldrb	r3, [r7, #5]
 8002296:	f891 0109 	ldrb.w	r0, [r1, #265]	; 0x109
 800229a:	4916      	ldr	r1, [pc, #88]	; (80022f4 <osStart+0x104>)
 800229c:	00d2      	lsls	r2, r2, #3
 800229e:	440a      	add	r2, r1
 80022a0:	4413      	add	r3, r2
 80022a2:	3331      	adds	r3, #49	; 0x31
 80022a4:	4602      	mov	r2, r0
 80022a6:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < osCore.tasksCounter;i++)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	3301      	adds	r3, #1
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <osStart+0x104>)
 80022b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3b6      	bcc.n	8002228 <osStart+0x38>

    }

    // Is mandatory to set the PendSV priority as lowest as possible */
    NVIC_SetPriority(PendSV_IRQn, (1 << __NVIC_PRIO_BITS)-1);
 80022ba:	210f      	movs	r1, #15
 80022bc:	f06f 0001 	mvn.w	r0, #1
 80022c0:	f7ff fee6 	bl	8002090 <__NVIC_SetPriority>

    // Activate and configure the Systick exception
    SystemCoreClockUpdate();
 80022c4:	f7fe fbaa 	bl	8000a1c <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / (1000U * SYSTICK_PERIOD_MS));
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <osStart+0x110>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <osStart+0x114>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff05 	bl	80020e4 <SysTick_Config>

    // Enable Systick and PendSV interrupts
    NVIC_EnableIRQ(PendSV_IRQn);
 80022da:	f06f 0001 	mvn.w	r0, #1
 80022de:	f7ff fe95 	bl	800200c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(SysTick_IRQn);
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295
 80022e6:	f7ff fe91 	bl	800200c <__NVIC_EnableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200005c8 	.word	0x200005c8
 80022f8:	08002385 	.word	0x08002385
 80022fc:	2000061c 	.word	0x2000061c
 8002300:	20000000 	.word	0x20000000
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <osDelay>:
{
	return osCore.ptrCurrTask;
}

void osDelay(const uint32_t tick)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	/* Disable SysTick_IRQn so is not invocated in here */
	NVIC_DisableIRQ(SysTick_IRQn);
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff fe98 	bl	8002048 <__NVIC_DisableIRQ>

	/* We need to reschedule */
	scheduler();
 8002318:	f000 f876 	bl	8002408 <scheduler>

	(osCore.ptrTaskList[osCore.runningTaskID - 1])->taskDelay = tick;
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <osDelay+0x64>)
 800231e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002322:	3b01      	subs	r3, #1
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <osDelay+0x64>)
 8002326:	3304      	adds	r3, #4
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	(osCore.ptrTaskList[osCore.runningTaskID - 1])->taskExecStatus = OS_TASK_BLOCKED;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <osDelay+0x64>)
 8002334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002338:	3b01      	subs	r3, #1
 800233a:	4a0c      	ldr	r2, [pc, #48]	; (800236c <osDelay+0x64>)
 800233c:	3304      	adds	r3, #4
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

	/*
     * Set up bit corresponding exception PendSV
     */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <osDelay+0x68>)
 800234a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
 8002350:	f3bf 8f6f 	isb	sy
}
 8002354:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002356:	f3bf 8f4f 	dsb	sy
}
 800235a:	bf00      	nop
     * Data Synchronization Barrier; ensures that all memory accesses are
     * completed before next instruction is executed
     */
    __DSB();
	/* Enable SysTick_IRQn again */
    NVIC_EnableIRQ(SysTick_IRQn);
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff fe54 	bl	800200c <__NVIC_EnableIRQ>

}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200005c8 	.word	0x200005c8
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <osSysTickHook>:
        __WFI();
    }
}

WEAK void osSysTickHook(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
    __ASM volatile ("nop");
 8002378:	bf00      	nop
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <osIdleTask>:
    {
    }
}

WEAK void osIdleTask(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
    while(1)
    {
    	__WFI();
 8002388:	bf30      	wfi
 800238a:	e7fd      	b.n	8002388 <osIdleTask+0x4>

0800238c <getNextContext>:
}

/* ================ Private functions implementation ================ */

static uint32_t getNextContext(uint32_t currentStackPointer)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    if (osCore.execStatus != OS_STATUS_RUNNING)
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <getNextContext+0x78>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <getNextContext+0x22>
    {
    	osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <getNextContext+0x78>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    	osCore.execStatus = OS_STATUS_RUNNING;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <getNextContext+0x78>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e018      	b.n	80023e0 <getNextContext+0x54>
    }
    else
    {
        // Storage last stack pointer used on current task and change state to ready
        osCore.ptrCurrTask->taskStackPointer = currentStackPointer;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <getNextContext+0x78>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if(osCore.ptrCurrTask->taskExecStatus == OS_TASK_RUNNING)
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <getNextContext+0x78>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d104      	bne.n	80023ce <getNextContext+0x42>
        	osCore.ptrCurrTask->taskExecStatus = OS_TASK_READY;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <getNextContext+0x78>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

        // Switch address memory points on current task for next task and change state of task
        osCore.ptrCurrTask = osCore.ptrNextTask;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <getNextContext+0x78>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <getNextContext+0x78>)
 80023d4:	6093      	str	r3, [r2, #8]
        osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <getNextContext+0x78>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    }

    osCore.runningTaskID = osCore.ptrCurrTask->taskID;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <getNextContext+0x78>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <getNextContext+0x78>)
 80023ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    return osCore.ptrCurrTask->taskStackPointer;
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <getNextContext+0x78>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	200005c8 	.word	0x200005c8

08002408 <scheduler>:

static void scheduler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
	uint8_t row, col, id = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	717b      	strb	r3, [r7, #5]

    // Check if this is the first scheduler execution
    if (osCore.execStatus != OS_STATUS_RUNNING)
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <scheduler+0x15c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00e      	beq.n	8002438 <scheduler+0x30>
    {
    	osCore.ptrCurrTask = osCore.ptrTaskList[osCore.tasksCounter - 1];				// If the OS wasn't running load the first task to be run
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <scheduler+0x15c>)
 800241c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002420:	3b01      	subs	r3, #1
 8002422:	4a50      	ldr	r2, [pc, #320]	; (8002564 <scheduler+0x15c>)
 8002424:	3304      	adds	r3, #4
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <scheduler+0x15c>)
 800242c:	6093      	str	r3, [r2, #8]
    	osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 800242e:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <scheduler+0x15c>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    }

    // Recorriendo desde coordenada 0,0 de la prioridad mas alta, busca la primera tarea en estado READY
	row = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	71fb      	strb	r3, [r7, #7]
	do
	{
		if(osCore.taskPriorityTable[row][0] != 0)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4a49      	ldr	r2, [pc, #292]	; (8002564 <scheduler+0x15c>)
 8002440:	3306      	adds	r3, #6
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d021      	beq.n	8002490 <scheduler+0x88>
		{
			col = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	71bb      	strb	r3, [r7, #6]
			do
			{
				id = osCore.taskPriorityTable[row][col];
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	79bb      	ldrb	r3, [r7, #6]
 8002454:	4943      	ldr	r1, [pc, #268]	; (8002564 <scheduler+0x15c>)
 8002456:	00d2      	lsls	r2, r2, #3
 8002458:	440a      	add	r2, r1
 800245a:	4413      	add	r3, r2
 800245c:	3331      	adds	r3, #49	; 0x31
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	717b      	strb	r3, [r7, #5]
				col++;
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	3301      	adds	r3, #1
 8002466:	71bb      	strb	r3, [r7, #6]
			}
			while( (osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED) &&
 8002468:	797b      	ldrb	r3, [r7, #5]
 800246a:	3b01      	subs	r3, #1
 800246c:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <scheduler+0x15c>)
 800246e:	3304      	adds	r3, #4
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002478:	2b02      	cmp	r3, #2
 800247a:	d109      	bne.n	8002490 <scheduler+0x88>
					(osCore.taskPriorityTable[row][col] != 0) );
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	79bb      	ldrb	r3, [r7, #6]
 8002480:	4938      	ldr	r1, [pc, #224]	; (8002564 <scheduler+0x15c>)
 8002482:	00d2      	lsls	r2, r2, #3
 8002484:	440a      	add	r2, r1
 8002486:	4413      	add	r3, r2
 8002488:	3331      	adds	r3, #49	; 0x31
 800248a:	781b      	ldrb	r3, [r3, #0]
			while( (osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED) &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1df      	bne.n	8002450 <scheduler+0x48>
		}
		row++;
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	3301      	adds	r3, #1
 8002494:	71fb      	strb	r3, [r7, #7]
	}
	while( osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED ||
 8002496:	797b      	ldrb	r3, [r7, #5]
 8002498:	3b01      	subs	r3, #1
 800249a:	4a32      	ldr	r2, [pc, #200]	; (8002564 <scheduler+0x15c>)
 800249c:	3304      	adds	r3, #4
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d0c8      	beq.n	800243c <scheduler+0x34>
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0c5      	beq.n	800243c <scheduler+0x34>
			id == 0 );

	if(osCore.ptrCurrTask->taskPriority == osCore.ptrTaskList[id - 1]->taskPriority )
 80024b0:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <scheduler+0x15c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f893 2134 	ldrb.w	r2, [r3, #308]	; 0x134
 80024b8:	797b      	ldrb	r3, [r7, #5]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	4929      	ldr	r1, [pc, #164]	; (8002564 <scheduler+0x15c>)
 80024be:	3304      	adds	r3, #4
 80024c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024c4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d13d      	bne.n	8002548 <scheduler+0x140>
	{
		col--;
 80024cc:	79bb      	ldrb	r3, [r7, #6]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	71bb      	strb	r3, [r7, #6]
		row--;
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	71fb      	strb	r3, [r7, #7]
		do
		{
			id = osCore.taskPriorityTable[row][col];
 80024d8:	79fa      	ldrb	r2, [r7, #7]
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	4921      	ldr	r1, [pc, #132]	; (8002564 <scheduler+0x15c>)
 80024de:	00d2      	lsls	r2, r2, #3
 80024e0:	440a      	add	r2, r1
 80024e2:	4413      	add	r3, r2
 80024e4:	3331      	adds	r3, #49	; 0x31
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	717b      	strb	r3, [r7, #5]
			col++;
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	3301      	adds	r3, #1
 80024ee:	71bb      	strb	r3, [r7, #6]
		}
		while(osCore.ptrTaskList[id - 1]->taskExecStatus != OS_TASK_RUNNING);
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <scheduler+0x15c>)
 80024f6:	3304      	adds	r3, #4
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002500:	2b01      	cmp	r3, #1
 8002502:	d1e9      	bne.n	80024d8 <scheduler+0xd0>

		do
		{
			if(osCore.taskPriorityTable[row][col] == 0)
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <scheduler+0x15c>)
 800250a:	00d2      	lsls	r2, r2, #3
 800250c:	440a      	add	r2, r1
 800250e:	4413      	add	r3, r2
 8002510:	3331      	adds	r3, #49	; 0x31
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <scheduler+0x114>
				col = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	71bb      	strb	r3, [r7, #6]

			id = osCore.taskPriorityTable[row][col];
 800251c:	79fa      	ldrb	r2, [r7, #7]
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	4910      	ldr	r1, [pc, #64]	; (8002564 <scheduler+0x15c>)
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	440a      	add	r2, r1
 8002526:	4413      	add	r3, r2
 8002528:	3331      	adds	r3, #49	; 0x31
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	717b      	strb	r3, [r7, #5]
			col++;
 800252e:	79bb      	ldrb	r3, [r7, #6]
 8002530:	3301      	adds	r3, #1
 8002532:	71bb      	strb	r3, [r7, #6]
		}
		while(osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED);
 8002534:	797b      	ldrb	r3, [r7, #5]
 8002536:	3b01      	subs	r3, #1
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <scheduler+0x15c>)
 800253a:	3304      	adds	r3, #4
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8002544:	2b02      	cmp	r3, #2
 8002546:	d0dd      	beq.n	8002504 <scheduler+0xfc>

	}

	osCore.ptrNextTask = osCore.ptrTaskList[id - 1];			// Load next task to be run
 8002548:	797b      	ldrb	r3, [r7, #5]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a05      	ldr	r2, [pc, #20]	; (8002564 <scheduler+0x15c>)
 800254e:	3304      	adds	r3, #4
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <scheduler+0x15c>)
 8002556:	60d3      	str	r3, [r2, #12]

}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	200005c8 	.word	0x200005c8

08002568 <SysTick_Handler>:

/* ========== Processor Interruption and Exception Handlers ========= */

void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
	uint8_t id;

    scheduler();
 800256e:	f7ff ff4b 	bl	8002408 <scheduler>
    osSysTickHook();
 8002572:	f7ff feff 	bl	8002374 <osSysTickHook>

    // esto no tendria que ir antes de llamar al scheduler?
    for(id = 1;id <= osCore.tasksCounter;id++)
 8002576:	2301      	movs	r3, #1
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	e02a      	b.n	80025d2 <SysTick_Handler+0x6a>
    {
    	if(osCore.ptrTaskList[id - 1]->taskExecStatus == OS_TASK_BLOCKED)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	3b01      	subs	r3, #1
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <SysTick_Handler+0x94>)
 8002582:	3304      	adds	r3, #4
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800258c:	2b02      	cmp	r3, #2
 800258e:	d11d      	bne.n	80025cc <SysTick_Handler+0x64>
    	{
    		(osCore.ptrTaskList[id - 1]->taskDelay)--;
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	3b01      	subs	r3, #1
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <SysTick_Handler+0x94>)
 8002596:	3304      	adds	r3, #4
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80025a0:	3a01      	subs	r2, #1
 80025a2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

    		if(osCore.ptrTaskList[id - 1]->taskDelay == 0)
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	4a14      	ldr	r2, [pc, #80]	; (80025fc <SysTick_Handler+0x94>)
 80025ac:	3304      	adds	r3, #4
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d108      	bne.n	80025cc <SysTick_Handler+0x64>
    			osCore.ptrTaskList[id - 1]->taskExecStatus = OS_TASK_READY;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	3b01      	subs	r3, #1
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <SysTick_Handler+0x94>)
 80025c0:	3304      	adds	r3, #4
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    for(id = 1;id <= osCore.tasksCounter;id++)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	3301      	adds	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <SysTick_Handler+0x94>)
 80025d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d9ce      	bls.n	800257c <SysTick_Handler+0x14>


    /*
     * Set up bit corresponding exception PendSV
     */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <SysTick_Handler+0x98>)
 80025e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
 80025e6:	f3bf 8f6f 	isb	sy
}
 80025ea:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80025ec:	f3bf 8f4f 	dsb	sy
}
 80025f0:	bf00      	nop
    /*
     * Data Synchronization Barrier; ensures that all memory accesses are
     * completed before next instruction is executed
     */
    __DSB();
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200005c8 	.word	0x200005c8
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <PendSV_Handler>:
	 * el unico argumento pasado por RO, y el valor de retorno tambien se almacena en R0
	 *
	 * NOTA: El primer ingreso a este handler (luego del reset) implica que el push se hace sobre el
	 * stack inicial, ese stack se pierde porque no hay seguimiento del MSP en el primer ingreso
     */
    __ASM volatile ("push {r4-r11, lr}");
 8002604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    __ASM volatile ("mrs r0, msp");
 8002608:	f3ef 8008 	mrs	r0, MSP
    __ASM volatile ("bl %0" :: "i"(getNextContext));
 800260c:	f7ff febe 	bl	800238c <getNextContext>
    __ASM volatile ("msr msp, r0");
 8002610:	f380 8808 	msr	MSP, r0
    __ASM volatile ("pop {r4-r11, lr}");    //Recuperados todos los valores de registros
 8002614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Se hace un branch indirect con el valor de LR que es nuevamente EXEC_RETURN */
    __ASM volatile ("bx lr");
 8002618:	4770      	bx	lr
}
 800261a:	bf00      	nop

0800261c <osQueueInit>:

static void __pushItem(osQueueObject * queue, const void * item);
static void __pullItem(osQueueObject * queue, const void * item);

bool osQueueInit(osQueueObject * queue, const uint32_t dataSize)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	bool queueCreated = false;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]

	if( (queue != NULL) && (dataSize != 0) )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01d      	beq.n	800266c <osQueueInit+0x50>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01a      	beq.n	800266c <osQueueInit+0x50>
	{
		queue->qLength = 0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	711a      	strb	r2, [r3, #4]
		queue->qWaitingTask = NULL;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
		queue->qItemSizeBytes = dataSize;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	715a      	strb	r2, [r3, #5]
		queue->qBuffer = malloc(dataSize * MAX_SIZE_QUEUE);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	015b      	lsls	r3, r3, #5
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f812 	bl	8002678 <malloc>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
	    queue->qHead = 0;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	731a      	strb	r2, [r3, #12]
	    queue->qTail = 0;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	735a      	strb	r2, [r3, #13]
	    queueCreated = true;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
	}

	return queueCreated;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <malloc>:
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <malloc+0xc>)
 800267a:	4601      	mov	r1, r0
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f000 b823 	b.w	80026c8 <_malloc_r>
 8002682:	bf00      	nop
 8002684:	20000058 	.word	0x20000058

08002688 <sbrk_aligned>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	4e0e      	ldr	r6, [pc, #56]	; (80026c4 <sbrk_aligned+0x3c>)
 800268c:	460c      	mov	r4, r1
 800268e:	6831      	ldr	r1, [r6, #0]
 8002690:	4605      	mov	r5, r0
 8002692:	b911      	cbnz	r1, 800269a <sbrk_aligned+0x12>
 8002694:	f000 f8ac 	bl	80027f0 <_sbrk_r>
 8002698:	6030      	str	r0, [r6, #0]
 800269a:	4621      	mov	r1, r4
 800269c:	4628      	mov	r0, r5
 800269e:	f000 f8a7 	bl	80027f0 <_sbrk_r>
 80026a2:	1c43      	adds	r3, r0, #1
 80026a4:	d00a      	beq.n	80026bc <sbrk_aligned+0x34>
 80026a6:	1cc4      	adds	r4, r0, #3
 80026a8:	f024 0403 	bic.w	r4, r4, #3
 80026ac:	42a0      	cmp	r0, r4
 80026ae:	d007      	beq.n	80026c0 <sbrk_aligned+0x38>
 80026b0:	1a21      	subs	r1, r4, r0
 80026b2:	4628      	mov	r0, r5
 80026b4:	f000 f89c 	bl	80027f0 <_sbrk_r>
 80026b8:	3001      	adds	r0, #1
 80026ba:	d101      	bne.n	80026c0 <sbrk_aligned+0x38>
 80026bc:	f04f 34ff 	mov.w	r4, #4294967295
 80026c0:	4620      	mov	r0, r4
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	2000075c 	.word	0x2000075c

080026c8 <_malloc_r>:
 80026c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026cc:	1ccd      	adds	r5, r1, #3
 80026ce:	f025 0503 	bic.w	r5, r5, #3
 80026d2:	3508      	adds	r5, #8
 80026d4:	2d0c      	cmp	r5, #12
 80026d6:	bf38      	it	cc
 80026d8:	250c      	movcc	r5, #12
 80026da:	2d00      	cmp	r5, #0
 80026dc:	4607      	mov	r7, r0
 80026de:	db01      	blt.n	80026e4 <_malloc_r+0x1c>
 80026e0:	42a9      	cmp	r1, r5
 80026e2:	d905      	bls.n	80026f0 <_malloc_r+0x28>
 80026e4:	230c      	movs	r3, #12
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	2600      	movs	r6, #0
 80026ea:	4630      	mov	r0, r6
 80026ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80027c4 <_malloc_r+0xfc>
 80026f4:	f000 f868 	bl	80027c8 <__malloc_lock>
 80026f8:	f8d8 3000 	ldr.w	r3, [r8]
 80026fc:	461c      	mov	r4, r3
 80026fe:	bb5c      	cbnz	r4, 8002758 <_malloc_r+0x90>
 8002700:	4629      	mov	r1, r5
 8002702:	4638      	mov	r0, r7
 8002704:	f7ff ffc0 	bl	8002688 <sbrk_aligned>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	4604      	mov	r4, r0
 800270c:	d155      	bne.n	80027ba <_malloc_r+0xf2>
 800270e:	f8d8 4000 	ldr.w	r4, [r8]
 8002712:	4626      	mov	r6, r4
 8002714:	2e00      	cmp	r6, #0
 8002716:	d145      	bne.n	80027a4 <_malloc_r+0xdc>
 8002718:	2c00      	cmp	r4, #0
 800271a:	d048      	beq.n	80027ae <_malloc_r+0xe6>
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	4631      	mov	r1, r6
 8002720:	4638      	mov	r0, r7
 8002722:	eb04 0903 	add.w	r9, r4, r3
 8002726:	f000 f863 	bl	80027f0 <_sbrk_r>
 800272a:	4581      	cmp	r9, r0
 800272c:	d13f      	bne.n	80027ae <_malloc_r+0xe6>
 800272e:	6821      	ldr	r1, [r4, #0]
 8002730:	1a6d      	subs	r5, r5, r1
 8002732:	4629      	mov	r1, r5
 8002734:	4638      	mov	r0, r7
 8002736:	f7ff ffa7 	bl	8002688 <sbrk_aligned>
 800273a:	3001      	adds	r0, #1
 800273c:	d037      	beq.n	80027ae <_malloc_r+0xe6>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	442b      	add	r3, r5
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	f8d8 3000 	ldr.w	r3, [r8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d038      	beq.n	80027be <_malloc_r+0xf6>
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	42a2      	cmp	r2, r4
 8002750:	d12b      	bne.n	80027aa <_malloc_r+0xe2>
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	e00f      	b.n	8002778 <_malloc_r+0xb0>
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	1b52      	subs	r2, r2, r5
 800275c:	d41f      	bmi.n	800279e <_malloc_r+0xd6>
 800275e:	2a0b      	cmp	r2, #11
 8002760:	d917      	bls.n	8002792 <_malloc_r+0xca>
 8002762:	1961      	adds	r1, r4, r5
 8002764:	42a3      	cmp	r3, r4
 8002766:	6025      	str	r5, [r4, #0]
 8002768:	bf18      	it	ne
 800276a:	6059      	strne	r1, [r3, #4]
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	bf08      	it	eq
 8002770:	f8c8 1000 	streq.w	r1, [r8]
 8002774:	5162      	str	r2, [r4, r5]
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	4638      	mov	r0, r7
 800277a:	f104 060b 	add.w	r6, r4, #11
 800277e:	f000 f829 	bl	80027d4 <__malloc_unlock>
 8002782:	f026 0607 	bic.w	r6, r6, #7
 8002786:	1d23      	adds	r3, r4, #4
 8002788:	1af2      	subs	r2, r6, r3
 800278a:	d0ae      	beq.n	80026ea <_malloc_r+0x22>
 800278c:	1b9b      	subs	r3, r3, r6
 800278e:	50a3      	str	r3, [r4, r2]
 8002790:	e7ab      	b.n	80026ea <_malloc_r+0x22>
 8002792:	42a3      	cmp	r3, r4
 8002794:	6862      	ldr	r2, [r4, #4]
 8002796:	d1dd      	bne.n	8002754 <_malloc_r+0x8c>
 8002798:	f8c8 2000 	str.w	r2, [r8]
 800279c:	e7ec      	b.n	8002778 <_malloc_r+0xb0>
 800279e:	4623      	mov	r3, r4
 80027a0:	6864      	ldr	r4, [r4, #4]
 80027a2:	e7ac      	b.n	80026fe <_malloc_r+0x36>
 80027a4:	4634      	mov	r4, r6
 80027a6:	6876      	ldr	r6, [r6, #4]
 80027a8:	e7b4      	b.n	8002714 <_malloc_r+0x4c>
 80027aa:	4613      	mov	r3, r2
 80027ac:	e7cc      	b.n	8002748 <_malloc_r+0x80>
 80027ae:	230c      	movs	r3, #12
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4638      	mov	r0, r7
 80027b4:	f000 f80e 	bl	80027d4 <__malloc_unlock>
 80027b8:	e797      	b.n	80026ea <_malloc_r+0x22>
 80027ba:	6025      	str	r5, [r4, #0]
 80027bc:	e7dc      	b.n	8002778 <_malloc_r+0xb0>
 80027be:	605b      	str	r3, [r3, #4]
 80027c0:	deff      	udf	#255	; 0xff
 80027c2:	bf00      	nop
 80027c4:	20000758 	.word	0x20000758

080027c8 <__malloc_lock>:
 80027c8:	4801      	ldr	r0, [pc, #4]	; (80027d0 <__malloc_lock+0x8>)
 80027ca:	f000 b84b 	b.w	8002864 <__retarget_lock_acquire_recursive>
 80027ce:	bf00      	nop
 80027d0:	2000089c 	.word	0x2000089c

080027d4 <__malloc_unlock>:
 80027d4:	4801      	ldr	r0, [pc, #4]	; (80027dc <__malloc_unlock+0x8>)
 80027d6:	f000 b846 	b.w	8002866 <__retarget_lock_release_recursive>
 80027da:	bf00      	nop
 80027dc:	2000089c 	.word	0x2000089c

080027e0 <memset>:
 80027e0:	4402      	add	r2, r0
 80027e2:	4603      	mov	r3, r0
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d100      	bne.n	80027ea <memset+0xa>
 80027e8:	4770      	bx	lr
 80027ea:	f803 1b01 	strb.w	r1, [r3], #1
 80027ee:	e7f9      	b.n	80027e4 <memset+0x4>

080027f0 <_sbrk_r>:
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	4d06      	ldr	r5, [pc, #24]	; (800280c <_sbrk_r+0x1c>)
 80027f4:	2300      	movs	r3, #0
 80027f6:	4604      	mov	r4, r0
 80027f8:	4608      	mov	r0, r1
 80027fa:	602b      	str	r3, [r5, #0]
 80027fc:	f7fe f8c6 	bl	800098c <_sbrk>
 8002800:	1c43      	adds	r3, r0, #1
 8002802:	d102      	bne.n	800280a <_sbrk_r+0x1a>
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	b103      	cbz	r3, 800280a <_sbrk_r+0x1a>
 8002808:	6023      	str	r3, [r4, #0]
 800280a:	bd38      	pop	{r3, r4, r5, pc}
 800280c:	20000898 	.word	0x20000898

08002810 <__errno>:
 8002810:	4b01      	ldr	r3, [pc, #4]	; (8002818 <__errno+0x8>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000058 	.word	0x20000058

0800281c <__libc_init_array>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	4d0d      	ldr	r5, [pc, #52]	; (8002854 <__libc_init_array+0x38>)
 8002820:	4c0d      	ldr	r4, [pc, #52]	; (8002858 <__libc_init_array+0x3c>)
 8002822:	1b64      	subs	r4, r4, r5
 8002824:	10a4      	asrs	r4, r4, #2
 8002826:	2600      	movs	r6, #0
 8002828:	42a6      	cmp	r6, r4
 800282a:	d109      	bne.n	8002840 <__libc_init_array+0x24>
 800282c:	4d0b      	ldr	r5, [pc, #44]	; (800285c <__libc_init_array+0x40>)
 800282e:	4c0c      	ldr	r4, [pc, #48]	; (8002860 <__libc_init_array+0x44>)
 8002830:	f000 f81a 	bl	8002868 <_init>
 8002834:	1b64      	subs	r4, r4, r5
 8002836:	10a4      	asrs	r4, r4, #2
 8002838:	2600      	movs	r6, #0
 800283a:	42a6      	cmp	r6, r4
 800283c:	d105      	bne.n	800284a <__libc_init_array+0x2e>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	f855 3b04 	ldr.w	r3, [r5], #4
 8002844:	4798      	blx	r3
 8002846:	3601      	adds	r6, #1
 8002848:	e7ee      	b.n	8002828 <__libc_init_array+0xc>
 800284a:	f855 3b04 	ldr.w	r3, [r5], #4
 800284e:	4798      	blx	r3
 8002850:	3601      	adds	r6, #1
 8002852:	e7f2      	b.n	800283a <__libc_init_array+0x1e>
 8002854:	080028a0 	.word	0x080028a0
 8002858:	080028a0 	.word	0x080028a0
 800285c:	080028a0 	.word	0x080028a0
 8002860:	080028a4 	.word	0x080028a4

08002864 <__retarget_lock_acquire_recursive>:
 8002864:	4770      	bx	lr

08002866 <__retarget_lock_release_recursive>:
 8002866:	4770      	bx	lr

08002868 <_init>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr

08002874 <_fini>:
 8002874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002876:	bf00      	nop
 8002878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287a:	bc08      	pop	{r3}
 800287c:	469e      	mov	lr, r3
 800287e:	4770      	bx	lr
