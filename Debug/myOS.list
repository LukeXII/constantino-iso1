
myOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f70  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003134  08003134  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800313c  0800313c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007d4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007e0  200007e0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e702  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ead  00000000  00000000  0002e781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b68  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008cc  00000000  00000000  00031198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023d99  00000000  00000000  00031a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d0c2  00000000  00000000  000557fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9ab5  00000000  00000000  000628bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002fec  00000000  00000000  0013c374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0013f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003104 	.word	0x08003104

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003104 	.word	0x08003104

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fbba 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f80a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f918 	bl	8000728 <MX_GPIO_Init>
  MX_ETH_Init();
 80004f8:	f000 f870 	bl	80005dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f8bc 	bl	8000678 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000500:	f000 f8e4 	bl	80006cc <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  __WFI();
 8000504:	bf30      	wfi
 8000506:	e7fd      	b.n	8000504 <main+0x1c>

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fdc8 	bl	80030ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000568:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fadb 	bl	8001b48 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f974 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fd3c 	bl	8002038 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f95d 	bl	8000884 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_ETH_Init+0x84>)
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <MX_ETH_Init+0x88>)
 80005e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_ETH_Init+0x8c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_ETH_Init+0x8c>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_ETH_Init+0x8c>)
 80005f4:	22e1      	movs	r2, #225	; 0xe1
 80005f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_ETH_Init+0x8c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_ETH_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_ETH_Init+0x84>)
 800060c:	4a16      	ldr	r2, [pc, #88]	; (8000668 <MX_ETH_Init+0x8c>)
 800060e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_ETH_Init+0x84>)
 8000612:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000616:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ETH_Init+0x84>)
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <MX_ETH_Init+0x90>)
 800061c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_ETH_Init+0x84>)
 8000620:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_ETH_Init+0x94>)
 8000622:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_ETH_Init+0x84>)
 8000626:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800062a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <MX_ETH_Init+0x84>)
 800062e:	f000 fc81 	bl	8000f34 <HAL_ETH_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f924 	bl	8000884 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800063c:	2238      	movs	r2, #56	; 0x38
 800063e:	2100      	movs	r1, #0
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ETH_Init+0x98>)
 8000642:	f002 fd33 	bl	80030ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_ETH_Init+0x98>)
 8000648:	2221      	movs	r2, #33	; 0x21
 800064a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_ETH_Init+0x98>)
 800064e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000652:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_ETH_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200001a0 	.word	0x200001a0
 8000664:	40028000 	.word	0x40028000
 8000668:	200007a0 	.word	0x200007a0
 800066c:	20000100 	.word	0x20000100
 8000670:	20000060 	.word	0x20000060
 8000674:	20000028 	.word	0x20000028

08000678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART3_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006b0:	f001 fee2 	bl	8002478 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8e3 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000250 	.word	0x20000250
 80006c8:	40004800 	.word	0x40004800

080006cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006da:	2204      	movs	r2, #4
 80006dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	f001 f8fd 	bl	800190e <HAL_PCD_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f8b3 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000294 	.word	0x20000294

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a4b      	ldr	r2, [pc, #300]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b45      	ldr	r3, [pc, #276]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a44      	ldr	r2, [pc, #272]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a3d      	ldr	r2, [pc, #244]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <MX_GPIO_Init+0x14c>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a28      	ldr	r2, [pc, #160]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ec:	4822      	ldr	r0, [pc, #136]	; (8000878 <MX_GPIO_Init+0x150>)
 80007ee:	f001 f875 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <MX_GPIO_Init+0x154>)
 80007f8:	f001 f870 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0x158>)
 8000814:	f000 feb6 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000818:	f244 0381 	movw	r3, #16513	; 0x4081
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_GPIO_Init+0x150>)
 8000832:	f000 fea7 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0x154>)
 800084e:	f000 fe99 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x154>)
 8000866:	f000 fe8d 	bl	8001584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3730      	adds	r7, #48	; 0x30
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40021800 	.word	0x40021800
 8000880:	40020800 	.word	0x40020800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <HAL_ETH_MspInit+0x174>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	f040 80a4 	bne.w	8000a4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
 8000908:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a52      	ldr	r2, [pc, #328]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800090e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800092a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b49      	ldr	r3, [pc, #292]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000946:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <HAL_ETH_MspInit+0x178>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009c8:	2332      	movs	r3, #50	; 0x32
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d8:	230b      	movs	r3, #11
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	4619      	mov	r1, r3
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <HAL_ETH_MspInit+0x17c>)
 80009e4:	f000 fdce 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009e8:	2386      	movs	r3, #134	; 0x86
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <HAL_ETH_MspInit+0x180>)
 8000a04:	f000 fdbe 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1a:	230b      	movs	r3, #11
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	480f      	ldr	r0, [pc, #60]	; (8000a64 <HAL_ETH_MspInit+0x184>)
 8000a26:	f000 fdad 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3c:	230b      	movs	r3, #11
 8000a3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <HAL_ETH_MspInit+0x188>)
 8000a48:	f000 fd9c 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3738      	adds	r7, #56	; 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40028000 	.word	0x40028000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_UART_MspInit+0x88>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_UART_MspInit+0x8c>)
 8000ae4:	f000 fd4e 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40004800 	.word	0x40004800
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020c00 	.word	0x40020c00

08000afc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b1c:	d13f      	bne.n	8000b9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <HAL_PCD_MspInit+0xb0>)
 8000b58:	f000 fd14 	bl	8001584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <HAL_PCD_MspInit+0xb0>)
 8000b72:	f000 fd07 	bl	8001584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6353      	str	r3, [r2, #52]	; 0x34
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_PCD_MspInit+0xac>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f002 fa3d 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc51 	bl	80004e8 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	08003144 	.word	0x08003144
  ldr r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c5c:	200007e0 	.word	0x200007e0

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f91d 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fdfa 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f927 	bl	8000f1a <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f000 f8fd 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200007a8 	.word	0x200007a8

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff ffee 	bl	8000d08 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffde 	bl	8000d08 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff47 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff5c 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffb0 	bl	8000e88 <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e06c      	b.n	8001020 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2223      	movs	r2, #35	; 0x23
 8000f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fcc1 	bl	80008e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_ETH_Init+0xf4>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a30      	ldr	r2, [pc, #192]	; (8001028 <HAL_ETH_Init+0xf4>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_ETH_Init+0xf4>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_ETH_Init+0xf8>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	; (800102c <HAL_ETH_Init+0xf8>)
 8000f80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f84:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_ETH_Init+0xf8>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4927      	ldr	r1, [pc, #156]	; (800102c <HAL_ETH_Init+0xf8>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_ETH_Init+0xf8>)
 8000f96:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000fae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb0:	f7ff feaa 	bl	8000d08 <HAL_GetTick>
 8000fb4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fb6:	e011      	b.n	8000fdc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000fb8:	f7ff fea6 	bl	8000d08 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fc6:	d909      	bls.n	8000fdc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	22e0      	movs	r2, #224	; 0xe0
 8000fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e021      	b.n	8001020 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1e4      	bne.n	8000fb8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f958 	bl	80012a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f9ff 	bl	80013f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fa55 	bl	80014aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f9bd 	bl	8001388 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2210      	movs	r2, #16
 800101a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40013800 	.word	0x40013800

08001030 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4b51      	ldr	r3, [pc, #324]	; (800118c <ETH_SetMACConfig+0x15c>)
 8001046:	4013      	ands	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	7c1b      	ldrb	r3, [r3, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <ETH_SetMACConfig+0x28>
 8001052:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001056:	e000      	b.n	800105a <ETH_SetMACConfig+0x2a>
 8001058:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	7c5b      	ldrb	r3, [r3, #17]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <ETH_SetMACConfig+0x38>
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	e000      	b.n	800106a <ETH_SetMACConfig+0x3a>
 8001068:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800106a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001070:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	7fdb      	ldrb	r3, [r3, #31]
 8001076:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001078:	431a      	orrs	r2, r3
                        macconf->Speed |
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800107e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	7f92      	ldrb	r2, [r2, #30]
 8001084:	2a00      	cmp	r2, #0
 8001086:	d102      	bne.n	800108e <ETH_SetMACConfig+0x5e>
 8001088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108c:	e000      	b.n	8001090 <ETH_SetMACConfig+0x60>
 800108e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001090:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7f1b      	ldrb	r3, [r3, #28]
 8001096:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001098:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800109e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	791b      	ldrb	r3, [r3, #4]
 80010a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80010a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d102      	bne.n	80010b8 <ETH_SetMACConfig+0x88>
 80010b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b6:	e000      	b.n	80010ba <ETH_SetMACConfig+0x8a>
 80010b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80010ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	7bdb      	ldrb	r3, [r3, #15]
 80010c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80010c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80010c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010d2:	4313      	orrs	r3, r2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fe18 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001106:	4013      	ands	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001116:	2a00      	cmp	r2, #0
 8001118:	d101      	bne.n	800111e <ETH_SetMACConfig+0xee>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	e000      	b.n	8001120 <ETH_SetMACConfig+0xf0>
 800111e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001120:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001126:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800112e:	2a01      	cmp	r2, #1
 8001130:	d101      	bne.n	8001136 <ETH_SetMACConfig+0x106>
 8001132:	2208      	movs	r2, #8
 8001134:	e000      	b.n	8001138 <ETH_SetMACConfig+0x108>
 8001136:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001138:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001140:	2a01      	cmp	r2, #1
 8001142:	d101      	bne.n	8001148 <ETH_SetMACConfig+0x118>
 8001144:	2204      	movs	r2, #4
 8001146:	e000      	b.n	800114a <ETH_SetMACConfig+0x11a>
 8001148:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800114a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001152:	2a01      	cmp	r2, #1
 8001154:	d101      	bne.n	800115a <ETH_SetMACConfig+0x12a>
 8001156:	2202      	movs	r2, #2
 8001158:	e000      	b.n	800115c <ETH_SetMACConfig+0x12c>
 800115a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800115c:	4313      	orrs	r3, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fdd3 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	ff20810f 	.word	0xff20810f

08001190 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <ETH_SetDMAConfig+0x110>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	7b1b      	ldrb	r3, [r3, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <ETH_SetDMAConfig+0x2c>
 80011b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011ba:	e000      	b.n	80011be <ETH_SetDMAConfig+0x2e>
 80011bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80011c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	7f52      	ldrb	r2, [r2, #29]
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d102      	bne.n	80011d4 <ETH_SetDMAConfig+0x44>
 80011ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011d2:	e000      	b.n	80011d6 <ETH_SetDMAConfig+0x46>
 80011d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80011d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	7b9b      	ldrb	r3, [r3, #14]
 80011dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80011de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80011e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	7f1b      	ldrb	r3, [r3, #28]
 80011ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80011ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	7f9b      	ldrb	r3, [r3, #30]
 80011f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80011f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80011fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001202:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001204:	4313      	orrs	r3, r2
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001214:	461a      	mov	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff fd7a 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001244:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800124a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001250:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001258:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800125a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001262:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001268:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001276:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fd4b 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	f8de3f23 	.word	0xf8de3f23

080012a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0a6      	sub	sp, #152	; 0x98
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80012e0:	2300      	movs	r3, #0
 80012e2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800130c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001318:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800131c:	4619      	mov	r1, r3
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fe86 	bl	8001030 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001324:	2301      	movs	r3, #1
 8001326:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001328:	2301      	movs	r3, #1
 800132a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001332:	2301      	movs	r3, #1
 8001334:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001350:	2301      	movs	r3, #1
 8001352:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001358:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800135a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001366:	2301      	movs	r3, #1
 8001368:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff08 	bl	8001190 <ETH_SetDMAConfig>
}
 8001380:	bf00      	nop
 8001382:	3798      	adds	r7, #152	; 0x98
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3305      	adds	r3, #5
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	3204      	adds	r2, #4
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <ETH_MACAddressConfig+0x68>)
 80013aa:	4413      	add	r3, r2
 80013ac:	461a      	mov	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3303      	adds	r3, #3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	061a      	lsls	r2, r3, #24
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3302      	adds	r3, #2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	4313      	orrs	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <ETH_MACAddressConfig+0x6c>)
 80013da:	4413      	add	r3, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	6013      	str	r3, [r2, #0]
}
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40028040 	.word	0x40028040
 80013f4:	40028044 	.word	0x40028044

080013f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e03e      	b.n	8001484 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68d9      	ldr	r1, [r3, #12]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	3206      	adds	r2, #6
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d80c      	bhi.n	8001468 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68d9      	ldr	r1, [r3, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	461a      	mov	r2, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	e004      	b.n	8001472 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3301      	adds	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d9bd      	bls.n	8001406 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149c:	611a      	str	r2, [r3, #16]
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e046      	b.n	8001546 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6919      	ldr	r1, [r3, #16]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80014fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	3212      	adds	r2, #18
 8001512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d80c      	bhi.n	8001536 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6919      	ldr	r1, [r3, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	461a      	mov	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	e004      	b.n	8001540 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d9b5      	bls.n	80014b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	60da      	str	r2, [r3, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e177      	b.n	8001890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8166 	bne.w	800188a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d005      	beq.n	80015d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d130      	bne.n	8001638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80c0 	beq.w	800188a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_GPIO_Init+0x324>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_GPIO_Init+0x324>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_GPIO_Init+0x324>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001726:	4a61      	ldr	r2, [pc, #388]	; (80018ac <HAL_GPIO_Init+0x328>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_GPIO_Init+0x32c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d037      	beq.n	80017c2 <HAL_GPIO_Init+0x23e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_GPIO_Init+0x330>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d031      	beq.n	80017be <HAL_GPIO_Init+0x23a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <HAL_GPIO_Init+0x334>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_GPIO_Init+0x236>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a55      	ldr	r2, [pc, #340]	; (80018bc <HAL_GPIO_Init+0x338>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x232>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a54      	ldr	r2, [pc, #336]	; (80018c0 <HAL_GPIO_Init+0x33c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x22e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a53      	ldr	r2, [pc, #332]	; (80018c4 <HAL_GPIO_Init+0x340>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x22a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_GPIO_Init+0x344>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x226>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x348>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x222>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_GPIO_Init+0x34c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x21e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x21a>
 800179a:	2309      	movs	r3, #9
 800179c:	e012      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 800179e:	230a      	movs	r3, #10
 80017a0:	e010      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017a2:	2308      	movs	r3, #8
 80017a4:	e00e      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017aa:	2306      	movs	r3, #6
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017c2:	2300      	movs	r3, #0
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d4:	4935      	ldr	r1, [pc, #212]	; (80018ac <HAL_GPIO_Init+0x328>)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_GPIO_Init+0x354>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001806:	4a34      	ldr	r2, [pc, #208]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <HAL_GPIO_Init+0x354>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x354>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f ae84 	bls.w	80015a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40022400 	.word	0x40022400
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800190e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001910:	b08f      	sub	sp, #60	; 0x3c
 8001912:	af0a      	add	r7, sp, #40	; 0x28
 8001914:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e10f      	b.n	8001b40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff f8de 	bl	8000afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f001 f8ad 	bl	8002abe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	687e      	ldr	r6, [r7, #4]
 800196c:	466d      	mov	r5, sp
 800196e:	f106 0410 	add.w	r4, r6, #16
 8001972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800197e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001982:	1d33      	adds	r3, r6, #4
 8001984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f001 f838 	bl	80029fc <USB_CoreInit>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0d0      	b.n	8001b40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 f89b 	bl	8002ae0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e04a      	b.n	8001a46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	333d      	adds	r3, #61	; 0x3d
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	333c      	adds	r3, #60	; 0x3c
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	b298      	uxth	r0, r3
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3344      	adds	r3, #68	; 0x44
 80019ec:	4602      	mov	r2, r0
 80019ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3340      	adds	r3, #64	; 0x40
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3348      	adds	r3, #72	; 0x48
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	334c      	adds	r3, #76	; 0x4c
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3354      	adds	r3, #84	; 0x54
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	3301      	adds	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3af      	bcc.n	80019b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e044      	b.n	8001ae0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	3301      	adds	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3b5      	bcc.n	8001a56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	687e      	ldr	r6, [r7, #4]
 8001af2:	466d      	mov	r5, sp
 8001af4:	f106 0410 	add.w	r4, r6, #16
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b08:	1d33      	adds	r3, r6, #4
 8001b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f001 f833 	bl	8002b78 <USB_DevInit>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e00d      	b.n	8001b40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 f9fe 	bl	8002f3a <USB_DevDisconnect>

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e267      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b66:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d00c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4b85      	ldr	r3, [pc, #532]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d112      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b7e      	ldr	r3, [pc, #504]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e242      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x74>
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6f      	ldr	r2, [pc, #444]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b6d      	ldr	r3, [pc, #436]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6c      	ldr	r2, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a68      	ldr	r2, [pc, #416]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f882 	bl	8000d08 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff f87e 	bl	8000d08 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e207      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff f86e 	bl	8000d08 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f86a 	bl	8000d08 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1f3      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5e:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x152>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c7      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4937      	ldr	r1, [pc, #220]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_OscConfig+0x244>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f823 	bl	8000d08 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f81f 	bl	8000d08 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1a8      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4925      	ldr	r1, [pc, #148]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_OscConfig+0x244>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff f802 	bl	8000d08 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d08:	f7fe fffe 	bl	8000d08 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e187      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d036      	beq.n	8001da0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_RCC_OscConfig+0x248>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7fe ffe2 	bl	8000d08 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d48:	f7fe ffde 	bl	8000d08 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e167      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x200>
 8001d66:	e01b      	b.n	8001da0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x248>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7fe ffcb 	bl	8000d08 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	e00e      	b.n	8001d94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d76:	f7fe ffc7 	bl	8000d08 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d907      	bls.n	8001d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e150      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	42470000 	.word	0x42470000
 8001d90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ea      	bne.n	8001d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8097 	beq.w	8001edc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a7c      	ldr	r2, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x474>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <HAL_RCC_OscConfig+0x474>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a73      	ldr	r2, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x474>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff87 	bl	8000d08 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfe:	f7fe ff83 	bl	8000d08 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e10c      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x474>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2ea>
 8001e24:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x324>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x30c>
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3e:	4a5e      	ldr	r2, [pc, #376]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6713      	str	r3, [r2, #112]	; 0x70
 8001e46:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4a:	4a5b      	ldr	r2, [pc, #364]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6713      	str	r3, [r2, #112]	; 0x70
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0x324>
 8001e54:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a54      	ldr	r2, [pc, #336]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f023 0304 	bic.w	r3, r3, #4
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d015      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7fe ff48 	bl	8000d08 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe ff44 	bl	8000d08 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0cb      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e92:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0ee      	beq.n	8001e7c <HAL_RCC_OscConfig+0x334>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7fe ff32 	bl	8000d08 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7fe ff2e 	bl	8000d08 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0b5      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ee      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80a1 	beq.w	8002028 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee6:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d05c      	beq.n	8001fac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d141      	bne.n	8001f7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_OscConfig+0x478>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7fe ff02 	bl	8000d08 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7fe fefe 	bl	8000d08 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e087      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	491b      	ldr	r1, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x478>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe fed7 	bl	8000d08 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe fed3 	bl	8000d08 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e05c      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x416>
 8001f7c:	e054      	b.n	8002028 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_RCC_OscConfig+0x478>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe fec0 	bl	8000d08 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe febc 	bl	8000d08 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e045      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x444>
 8001faa:	e03d      	b.n	8002028 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e038      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d028      	beq.n	8002024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d121      	bne.n	8002024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d11a      	bne.n	8002024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d111      	bne.n	8002024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	3b01      	subs	r3, #1
 800200e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d107      	bne.n	8002024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0cc      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d90c      	bls.n	8002074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d044      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d119      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e067      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4934      	ldr	r1, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7fe fdee 	bl	8000d08 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7fe fdea 	bl	8000d08 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e04f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d20c      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fd62 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	0800311c 	.word	0x0800311c
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002208:	b094      	sub	sp, #80	; 0x50
 800220a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	647b      	str	r3, [r7, #68]	; 0x44
 8002210:	2300      	movs	r3, #0
 8002212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002214:	2300      	movs	r3, #0
 8002216:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221c:	4b79      	ldr	r3, [pc, #484]	; (8002404 <HAL_RCC_GetSysClockFreq+0x200>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d00d      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x40>
 8002228:	2b08      	cmp	r3, #8
 800222a:	f200 80e1 	bhi.w	80023f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x34>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x3a>
 8002236:	e0db      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_GetSysClockFreq+0x204>)
 800223a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800223c:	e0db      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_GetSysClockFreq+0x208>)
 8002240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002242:	e0d8      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <HAL_RCC_GetSysClockFreq+0x200>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <HAL_RCC_GetSysClockFreq+0x200>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d063      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCC_GetSysClockFreq+0x200>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	2200      	movs	r2, #0
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
 8002264:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
 8002272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002276:	4622      	mov	r2, r4
 8002278:	462b      	mov	r3, r5
 800227a:	f04f 0000 	mov.w	r0, #0
 800227e:	f04f 0100 	mov.w	r1, #0
 8002282:	0159      	lsls	r1, r3, #5
 8002284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002288:	0150      	lsls	r0, r2, #5
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4621      	mov	r1, r4
 8002290:	1a51      	subs	r1, r2, r1
 8002292:	6139      	str	r1, [r7, #16]
 8002294:	4629      	mov	r1, r5
 8002296:	eb63 0301 	sbc.w	r3, r3, r1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022a8:	4659      	mov	r1, fp
 80022aa:	018b      	lsls	r3, r1, #6
 80022ac:	4651      	mov	r1, sl
 80022ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022b2:	4651      	mov	r1, sl
 80022b4:	018a      	lsls	r2, r1, #6
 80022b6:	4651      	mov	r1, sl
 80022b8:	ebb2 0801 	subs.w	r8, r2, r1
 80022bc:	4659      	mov	r1, fp
 80022be:	eb63 0901 	sbc.w	r9, r3, r1
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022d6:	4690      	mov	r8, r2
 80022d8:	4699      	mov	r9, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	eb18 0303 	adds.w	r3, r8, r3
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	462b      	mov	r3, r5
 80022e4:	eb49 0303 	adc.w	r3, r9, r3
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022f6:	4629      	mov	r1, r5
 80022f8:	024b      	lsls	r3, r1, #9
 80022fa:	4621      	mov	r1, r4
 80022fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002300:	4621      	mov	r1, r4
 8002302:	024a      	lsls	r2, r1, #9
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230a:	2200      	movs	r2, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002314:	f7fd ff6a 	bl	80001ec <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4613      	mov	r3, r2
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002320:	e058      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_GetSysClockFreq+0x200>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	099b      	lsrs	r3, r3, #6
 8002328:	2200      	movs	r2, #0
 800232a:	4618      	mov	r0, r3
 800232c:	4611      	mov	r1, r2
 800232e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800233c:	4642      	mov	r2, r8
 800233e:	464b      	mov	r3, r9
 8002340:	f04f 0000 	mov.w	r0, #0
 8002344:	f04f 0100 	mov.w	r1, #0
 8002348:	0159      	lsls	r1, r3, #5
 800234a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800234e:	0150      	lsls	r0, r2, #5
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4641      	mov	r1, r8
 8002356:	ebb2 0a01 	subs.w	sl, r2, r1
 800235a:	4649      	mov	r1, r9
 800235c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800236c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002374:	ebb2 040a 	subs.w	r4, r2, sl
 8002378:	eb63 050b 	sbc.w	r5, r3, fp
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	00eb      	lsls	r3, r5, #3
 8002386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800238a:	00e2      	lsls	r2, r4, #3
 800238c:	4614      	mov	r4, r2
 800238e:	461d      	mov	r5, r3
 8002390:	4643      	mov	r3, r8
 8002392:	18e3      	adds	r3, r4, r3
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	464b      	mov	r3, r9
 8002398:	eb45 0303 	adc.w	r3, r5, r3
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023aa:	4629      	mov	r1, r5
 80023ac:	028b      	lsls	r3, r1, #10
 80023ae:	4621      	mov	r1, r4
 80023b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b4:	4621      	mov	r1, r4
 80023b6:	028a      	lsls	r2, r1, #10
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023be:	2200      	movs	r2, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	61fa      	str	r2, [r7, #28]
 80023c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c8:	f7fd ff10 	bl	80001ec <__aeabi_uldivmod>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4613      	mov	r3, r2
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	3301      	adds	r3, #1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetSysClockFreq+0x204>)
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3750      	adds	r7, #80	; 0x50
 80023fc:	46bd      	mov	sp, r7
 80023fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	00f42400 	.word	0x00f42400
 800240c:	007a1200 	.word	0x007a1200

08002410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_GetHCLKFreq+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800242c:	f7ff fff0 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	0a9b      	lsrs	r3, r3, #10
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4903      	ldr	r1, [pc, #12]	; (800244c <HAL_RCC_GetPCLK1Freq+0x24>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	0800312c 	.word	0x0800312c

08002450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002454:	f7ff ffdc 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	0b5b      	lsrs	r3, r3, #13
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	0800312c 	.word	0x0800312c

08002478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e03f      	b.n	800250a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fae4 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f829 	bl	8002514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002518:	b0c0      	sub	sp, #256	; 0x100
 800251a:	af00      	add	r7, sp, #0
 800251c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	ea40 0301 	orr.w	r3, r0, r1
 800253c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	431a      	orrs	r2, r3
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800256c:	f021 010c 	bic.w	r1, r1, #12
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800257a:	430b      	orrs	r3, r1
 800257c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800258a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258e:	6999      	ldr	r1, [r3, #24]
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	ea40 0301 	orr.w	r3, r0, r1
 800259a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b8f      	ldr	r3, [pc, #572]	; (80027e0 <UART_SetConfig+0x2cc>)
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d005      	beq.n	80025b4 <UART_SetConfig+0xa0>
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <UART_SetConfig+0x2d0>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d104      	bne.n	80025be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b4:	f7ff ff4c 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 80025b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025bc:	e003      	b.n	80025c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025be:	f7ff ff33 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 80025c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d0:	f040 810c 	bne.w	80027ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	1891      	adds	r1, r2, r2
 80025ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80025ee:	415b      	adcs	r3, r3
 80025f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025f6:	4621      	mov	r1, r4
 80025f8:	eb12 0801 	adds.w	r8, r2, r1
 80025fc:	4629      	mov	r1, r5
 80025fe:	eb43 0901 	adc.w	r9, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800260e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002616:	4690      	mov	r8, r2
 8002618:	4699      	mov	r9, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb18 0303 	adds.w	r3, r8, r3
 8002620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002624:	462b      	mov	r3, r5
 8002626:	eb49 0303 	adc.w	r3, r9, r3
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800263a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800263e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002642:	460b      	mov	r3, r1
 8002644:	18db      	adds	r3, r3, r3
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
 8002648:	4613      	mov	r3, r2
 800264a:	eb42 0303 	adc.w	r3, r2, r3
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
 8002650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002658:	f7fd fdc8 	bl	80001ec <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <UART_SetConfig+0x2d4>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	011c      	lsls	r4, r3, #4
 800266a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	1891      	adds	r1, r2, r2
 8002682:	64b9      	str	r1, [r7, #72]	; 0x48
 8002684:	415b      	adcs	r3, r3
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800268c:	4641      	mov	r1, r8
 800268e:	eb12 0a01 	adds.w	sl, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb43 0b01 	adc.w	fp, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ac:	4692      	mov	sl, r2
 80026ae:	469b      	mov	fp, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	eb1a 0303 	adds.w	r3, sl, r3
 80026b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026ba:	464b      	mov	r3, r9
 80026bc:	eb4b 0303 	adc.w	r3, fp, r3
 80026c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026d8:	460b      	mov	r3, r1
 80026da:	18db      	adds	r3, r3, r3
 80026dc:	643b      	str	r3, [r7, #64]	; 0x40
 80026de:	4613      	mov	r3, r2
 80026e0:	eb42 0303 	adc.w	r3, r2, r3
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44
 80026e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026ee:	f7fd fd7d 	bl	80001ec <__aeabi_uldivmod>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <UART_SetConfig+0x2d4>)
 80026fa:	fba3 2301 	umull	r2, r3, r3, r1
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2264      	movs	r2, #100	; 0x64
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	1acb      	subs	r3, r1, r3
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <UART_SetConfig+0x2d4>)
 8002710:	fba3 2302 	umull	r2, r3, r3, r2
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800271c:	441c      	add	r4, r3
 800271e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800272c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	1891      	adds	r1, r2, r2
 8002736:	63b9      	str	r1, [r7, #56]	; 0x38
 8002738:	415b      	adcs	r3, r3
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800273c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002740:	4641      	mov	r1, r8
 8002742:	1851      	adds	r1, r2, r1
 8002744:	6339      	str	r1, [r7, #48]	; 0x30
 8002746:	4649      	mov	r1, r9
 8002748:	414b      	adcs	r3, r1
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002758:	4659      	mov	r1, fp
 800275a:	00cb      	lsls	r3, r1, #3
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002762:	4651      	mov	r1, sl
 8002764:	00ca      	lsls	r2, r1, #3
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	4603      	mov	r3, r0
 800276c:	4642      	mov	r2, r8
 800276e:	189b      	adds	r3, r3, r2
 8002770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002774:	464b      	mov	r3, r9
 8002776:	460a      	mov	r2, r1
 8002778:	eb42 0303 	adc.w	r3, r2, r3
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800278c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002794:	460b      	mov	r3, r1
 8002796:	18db      	adds	r3, r3, r3
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	4613      	mov	r3, r2
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027aa:	f7fd fd1f 	bl	80001ec <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <UART_SetConfig+0x2d4>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	; 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3332      	adds	r3, #50	; 0x32
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <UART_SetConfig+0x2d4>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4422      	add	r2, r4
 80027da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027dc:	e106      	b.n	80029ec <UART_SetConfig+0x4d8>
 80027de:	bf00      	nop
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80027fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80027fe:	4642      	mov	r2, r8
 8002800:	464b      	mov	r3, r9
 8002802:	1891      	adds	r1, r2, r2
 8002804:	6239      	str	r1, [r7, #32]
 8002806:	415b      	adcs	r3, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800280e:	4641      	mov	r1, r8
 8002810:	1854      	adds	r4, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0501 	adc.w	r5, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002834:	464b      	mov	r3, r9
 8002836:	eb45 0303 	adc.w	r3, r5, r3
 800283a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800283e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800284a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800285a:	4629      	mov	r1, r5
 800285c:	008b      	lsls	r3, r1, #2
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002864:	4621      	mov	r1, r4
 8002866:	008a      	lsls	r2, r1, #2
 8002868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800286c:	f7fd fcbe 	bl	80001ec <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	011c      	lsls	r4, r3, #4
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800288c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	61b9      	str	r1, [r7, #24]
 8002898:	415b      	adcs	r3, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6139      	str	r1, [r7, #16]
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028f8:	4649      	mov	r1, r9
 80028fa:	008b      	lsls	r3, r1, #2
 80028fc:	4641      	mov	r1, r8
 80028fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002902:	4641      	mov	r1, r8
 8002904:	008a      	lsls	r2, r1, #2
 8002906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800290a:	f7fd fc6f 	bl	80001ec <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4611      	mov	r1, r2
 8002914:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <UART_SetConfig+0x4e4>)
 8002916:	fba3 2301 	umull	r2, r3, r3, r1
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2264      	movs	r2, #100	; 0x64
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	1acb      	subs	r3, r1, r3
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	3332      	adds	r3, #50	; 0x32
 8002928:	4a33      	ldr	r2, [pc, #204]	; (80029f8 <UART_SetConfig+0x4e4>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002934:	441c      	add	r4, r3
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	673b      	str	r3, [r7, #112]	; 0x70
 800293e:	677a      	str	r2, [r7, #116]	; 0x74
 8002940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	415b      	adcs	r3, r3
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002954:	4641      	mov	r1, r8
 8002956:	1851      	adds	r1, r2, r1
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	4649      	mov	r1, r9
 800295c:	414b      	adcs	r3, r1
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800296c:	4659      	mov	r1, fp
 800296e:	00cb      	lsls	r3, r1, #3
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002976:	4651      	mov	r1, sl
 8002978:	00ca      	lsls	r2, r1, #3
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	4603      	mov	r3, r0
 8002980:	4642      	mov	r2, r8
 8002982:	189b      	adds	r3, r3, r2
 8002984:	66bb      	str	r3, [r7, #104]	; 0x68
 8002986:	464b      	mov	r3, r9
 8002988:	460a      	mov	r2, r1
 800298a:	eb42 0303 	adc.w	r3, r2, r3
 800298e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	663b      	str	r3, [r7, #96]	; 0x60
 800299a:	667a      	str	r2, [r7, #100]	; 0x64
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029a8:	4649      	mov	r1, r9
 80029aa:	008b      	lsls	r3, r1, #2
 80029ac:	4641      	mov	r1, r8
 80029ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b2:	4641      	mov	r1, r8
 80029b4:	008a      	lsls	r2, r1, #2
 80029b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029ba:	f7fd fc17 	bl	80001ec <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <UART_SetConfig+0x4e4>)
 80029c4:	fba3 1302 	umull	r1, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2164      	movs	r1, #100	; 0x64
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	3332      	adds	r3, #50	; 0x32
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <UART_SetConfig+0x4e4>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4422      	add	r2, r4
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	bf00      	nop
 80029ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029f2:	46bd      	mov	sp, r7
 80029f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f8:	51eb851f 	.word	0x51eb851f

080029fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029fc:	b084      	sub	sp, #16
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	f107 001c 	add.w	r0, r7, #28
 8002a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d122      	bne.n	8002a5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 faa2 	bl	8002f98 <USB_CoreReset>
 8002a54:	4603      	mov	r3, r0
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e01a      	b.n	8002a90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa96 	bl	8002f98 <USB_CoreReset>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
 8002a82:	e005      	b.n	8002a90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10b      	bne.n	8002aae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f043 0206 	orr.w	r2, r3, #6
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aba:	b004      	add	sp, #16
 8002abc:	4770      	bx	lr

08002abe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d115      	bne.n	8002b2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fe f906 	bl	8000d20 <HAL_Delay>
      ms++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3301      	adds	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa2e 	bl	8002f7c <USB_GetMode>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d01e      	beq.n	8002b64 <USB_SetCurrentMode+0x84>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b31      	cmp	r3, #49	; 0x31
 8002b2a:	d9f0      	bls.n	8002b0e <USB_SetCurrentMode+0x2e>
 8002b2c:	e01a      	b.n	8002b64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d115      	bne.n	8002b60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7fe f8ed 	bl	8000d20 <HAL_Delay>
      ms++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa15 	bl	8002f7c <USB_GetMode>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <USB_SetCurrentMode+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b31      	cmp	r3, #49	; 0x31
 8002b5c:	d9f0      	bls.n	8002b40 <USB_SetCurrentMode+0x60>
 8002b5e:	e001      	b.n	8002b64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e005      	b.n	8002b70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b32      	cmp	r3, #50	; 0x32
 8002b68:	d101      	bne.n	8002b6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b78:	b084      	sub	sp, #16
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	e009      	b.n	8002bac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	3340      	adds	r3, #64	; 0x40
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b0e      	cmp	r3, #14
 8002bb0:	d9f2      	bls.n	8002b98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11c      	bne.n	8002bf2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
 8002bf0:	e00b      	b.n	8002c0a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002c10:	461a      	mov	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c24:	461a      	mov	r2, r3
 8002c26:	680b      	ldr	r3, [r1, #0]
 8002c28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10c      	bne.n	8002c4a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002c36:	2100      	movs	r1, #0
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f965 	bl	8002f08 <USB_SetDevSpeed>
 8002c3e:	e008      	b.n	8002c52 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c40:	2101      	movs	r1, #1
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f960 	bl	8002f08 <USB_SetDevSpeed>
 8002c48:	e003      	b.n	8002c52 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c4a:	2103      	movs	r1, #3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f95b 	bl	8002f08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002c52:	2110      	movs	r1, #16
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8f3 	bl	8002e40 <USB_FlushTxFifo>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f91f 	bl	8002ea8 <USB_FlushRxFifo>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c86:	461a      	mov	r2, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e043      	b.n	8002d26 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb4:	d118      	bne.n	8002ce8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	e013      	b.n	8002cfa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e008      	b.n	8002cfa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d06:	461a      	mov	r2, r3
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	3301      	adds	r3, #1
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d3b7      	bcc.n	8002c9e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e043      	b.n	8002dbc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d4a:	d118      	bne.n	8002d7e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e013      	b.n	8002d90 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e008      	b.n	8002d90 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	461a      	mov	r2, r3
 8002db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	3301      	adds	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3b7      	bcc.n	8002d34 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002de4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f043 0210 	orr.w	r2, r3, #16
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <USB_DevInit+0x2c4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f043 0208 	orr.w	r2, r3, #8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e38:	b004      	add	sp, #16
 8002e3a:	4770      	bx	lr
 8002e3c:	803c3800 	.word	0x803c3800

08002e40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <USB_FlushTxFifo+0x64>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e01b      	b.n	8002e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	daf2      	bge.n	8002e4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	019b      	lsls	r3, r3, #6
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <USB_FlushTxFifo+0x64>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e006      	b.n	8002e98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d0f0      	beq.n	8002e78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	00030d40 	.word	0x00030d40

08002ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <USB_FlushRxFifo+0x5c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e018      	b.n	8002ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	daf2      	bge.n	8002eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3301      	adds	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <USB_FlushRxFifo+0x5c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e006      	b.n	8002ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d0f0      	beq.n	8002ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	00030d40 	.word	0x00030d40

08002f08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	68f9      	ldr	r1, [r7, #12]
 8002f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002f54:	f023 0303 	bic.w	r3, r3, #3
 8002f58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <USB_CoreReset+0x64>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e01b      	b.n	8002fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	daf2      	bge.n	8002fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <USB_CoreReset+0x64>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e006      	b.n	8002fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d0f0      	beq.n	8002fce <USB_CoreReset+0x36>

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	00030d40 	.word	0x00030d40

08003000 <getNextContext>:
    NVIC_EnableIRQ(SysTick_IRQn);
}
/* ================ Private functions implementation ================ */

static uint32_t getNextContext(uint32_t currentStackPointer)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    if (osCore.execStatus != OS_STATUS_RUNNING)
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <getNextContext+0x5c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <getNextContext+0x22>
    {
    	osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <getNextContext+0x5c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    	osCore.execStatus = OS_STATUS_RUNNING;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <getNextContext+0x5c>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e012      	b.n	8003048 <getNextContext+0x48>
    }
    else
    {
        // Storage last stack pointer used on current task and change state to ready.
        osCore.ptrCurrTask->taskStackPointer = currentStackPointer;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <getNextContext+0x5c>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        osCore.ptrCurrTask->taskExecStatus = OS_TASK_READY;
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <getNextContext+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

        // Switch address memory points on current task for next task and change state of task
        osCore.ptrCurrTask = osCore.ptrNextTask;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <getNextContext+0x5c>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <getNextContext+0x5c>)
 800303c:	6093      	str	r3, [r2, #8]
        osCore.ptrCurrTask->taskExecStatus = OS_TASK_RUNNING;
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <getNextContext+0x5c>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    }

    return osCore.ptrCurrTask->taskStackPointer;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <getNextContext+0x5c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	200007ac 	.word	0x200007ac

08003060 <scheduler>:

static void scheduler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0

}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <SysTick_Handler>:

/* ========== Processor Interruption and Exception Handlers ========= */

void SysTick_Handler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
    scheduler();
 8003074:	f7ff fff4 	bl	8003060 <scheduler>

    /*
     * Set up bit corresponding exception PendSV
     */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Handler+0x20>)
 800307a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307e:	605a      	str	r2, [r3, #4]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003080:	f3bf 8f6f 	isb	sy
}
 8003084:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003086:	f3bf 8f4f 	dsb	sy
}
 800308a:	bf00      	nop
    /*
     * Data Synchronization Barrier; ensures that all memory accesses are
     * completed before next instruction is executed
     */
    __DSB();
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <PendSV_Handler>:
	 * el unico argumento pasado por RO, y el valor de retorno tambien se almacena en R0
	 *
	 * NOTA: El primer ingreso a este handler (luego del reset) implica que el push se hace sobre el
	 * stack inicial, ese stack se pierde porque no hay seguimiento del MSP en el primer ingreso
     */
    __ASM volatile ("push {r4-r11, lr}");
 8003094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    __ASM volatile ("mrs r0, msp");
 8003098:	f3ef 8008 	mrs	r0, MSP
    __ASM volatile ("bl %0" :: "i"(getNextContext));
 800309c:	f7ff ffb0 	bl	8003000 <getNextContext>
    __ASM volatile ("msr msp, r0");
 80030a0:	f380 8808 	msr	MSP, r0
    __ASM volatile ("pop {r4-r11, lr}");    //Recuperados todos los valores de registros
 80030a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Se hace un branch indirect con el valor de LR que es nuevamente EXEC_RETURN */
    __ASM volatile ("bx lr");
 80030a8:	4770      	bx	lr
}
 80030aa:	bf00      	nop

080030ac <memset>:
 80030ac:	4402      	add	r2, r0
 80030ae:	4603      	mov	r3, r0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4d0d      	ldr	r5, [pc, #52]	; (80030f4 <__libc_init_array+0x38>)
 80030c0:	4c0d      	ldr	r4, [pc, #52]	; (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	2600      	movs	r6, #0
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	4d0b      	ldr	r5, [pc, #44]	; (80030fc <__libc_init_array+0x40>)
 80030ce:	4c0c      	ldr	r4, [pc, #48]	; (8003100 <__libc_init_array+0x44>)
 80030d0:	f000 f818 	bl	8003104 <_init>
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	2600      	movs	r6, #0
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	0800313c 	.word	0x0800313c
 80030f8:	0800313c 	.word	0x0800313c
 80030fc:	0800313c 	.word	0x0800313c
 8003100:	08003140 	.word	0x08003140

08003104 <_init>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr

08003110 <_fini>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr
